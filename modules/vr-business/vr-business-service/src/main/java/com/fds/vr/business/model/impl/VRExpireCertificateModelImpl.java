/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.VRExpireCertificate;
import com.fds.vr.business.model.VRExpireCertificateModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VRExpireCertificate service. Represents a row in the &quot;vr_expire_certificate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VRExpireCertificateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VRExpireCertificateImpl}.
 * </p>
 *
 * @author LamTV
 * @see VRExpireCertificateImpl
 * @see VRExpireCertificate
 * @see VRExpireCertificateModel
 * @generated
 */
@ProviderType
public class VRExpireCertificateModelImpl extends BaseModelImpl<VRExpireCertificate>
	implements VRExpireCertificateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vr expire certificate model instance should use the {@link VRExpireCertificate} interface instead.
	 */
	public static final String TABLE_NAME = "vr_expire_certificate";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "mtCore", Types.BIGINT },
			{ "convertAssembleId", Types.BIGINT },
			{ "validDossierId", Types.BIGINT },
			{ "validDossierIdCTN", Types.VARCHAR },
			{ "validDossierNo", Types.VARCHAR },
			{ "vehicleTypeCertificateId", Types.BIGINT },
			{ "dossierId", Types.BIGINT },
			{ "dossierIdCTN", Types.VARCHAR },
			{ "dossierNo", Types.VARCHAR },
			{ "dossierStatus", Types.VARCHAR },
			{ "previousExpireDate", Types.TIMESTAMP },
			{ "certificateRecordNo", Types.VARCHAR },
			{ "certificateRecordDate", Types.TIMESTAMP },
			{ "certificateRecordExpireDate", Types.TIMESTAMP },
			{ "expiredStatus", Types.INTEGER },
			{ "vehicleClass", Types.VARCHAR },
			{ "certifiedVehicleType", Types.VARCHAR },
			{ "certifiedVehicleTypeDescription", Types.VARCHAR },
			{ "certifiedTrademark", Types.VARCHAR },
			{ "certifiedTrademarkName", Types.VARCHAR },
			{ "certifiedCommercialName", Types.VARCHAR },
			{ "certifiedModelCode", Types.VARCHAR },
			{ "productionCountry", Types.VARCHAR },
			{ "safetytestReportNo", Types.VARCHAR },
			{ "safetytestReportDate", Types.TIMESTAMP },
			{ "emissionTestReportNo", Types.VARCHAR },
			{ "emissionTestReportDate", Types.TIMESTAMP },
			{ "commonSafetyStandard", Types.VARCHAR },
			{ "commonSafetyDescription", Types.VARCHAR },
			{ "emissionStandard", Types.VARCHAR },
			{ "emissionDescription", Types.VARCHAR },
			{ "othertestReportNo", Types.VARCHAR },
			{ "othertestReportDate", Types.TIMESTAMP },
			{ "copReportNo", Types.VARCHAR },
			{ "copReportDate", Types.TIMESTAMP },
			{ "copReportExpireDate", Types.TIMESTAMP },
			{ "validRequestNo", Types.VARCHAR },
			{ "validRequestDate", Types.TIMESTAMP },
			{ "validInspectionRecordNo", Types.VARCHAR },
			{ "validInspectionRecordDate", Types.TIMESTAMP },
			{ "validCorporationId", Types.BIGINT },
			{ "validInspectorId", Types.BIGINT },
			{ "validInspectorName", Types.VARCHAR },
			{ "validRemarks", Types.VARCHAR },
			{ "validInspectionNote", Types.VARCHAR },
			{ "deliverableFileEntryId", Types.BIGINT },
			{ "documentFileEntryId", Types.BIGINT },
			{ "modifyDate", Types.TIMESTAMP },
			{ "syncDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mtCore", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("convertAssembleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("validDossierId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("validDossierIdCTN", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("validDossierNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vehicleTypeCertificateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dossierId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dossierIdCTN", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dossierNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dossierStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("previousExpireDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("certificateRecordNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certificateRecordDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("certificateRecordExpireDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("expiredStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("vehicleClass", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedVehicleType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedVehicleTypeDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedTrademark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedTrademarkName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedCommercialName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedModelCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionCountry", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("safetytestReportNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("safetytestReportDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("emissionTestReportNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emissionTestReportDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("commonSafetyStandard", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("commonSafetyDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emissionStandard", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emissionDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("othertestReportNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("othertestReportDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("copReportNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("copReportExpireDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("validRequestNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("validRequestDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("validInspectionRecordNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("validInspectionRecordDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("validCorporationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("validInspectorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("validInspectorName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("validRemarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("validInspectionNote", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deliverableFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("documentFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifyDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("syncDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table vr_expire_certificate (id LONG not null primary key,mtCore LONG,convertAssembleId LONG,validDossierId LONG,validDossierIdCTN VARCHAR(75) null,validDossierNo VARCHAR(75) null,vehicleTypeCertificateId LONG,dossierId LONG,dossierIdCTN VARCHAR(75) null,dossierNo VARCHAR(75) null,dossierStatus VARCHAR(75) null,previousExpireDate DATE null,certificateRecordNo VARCHAR(75) null,certificateRecordDate DATE null,certificateRecordExpireDate DATE null,expiredStatus INTEGER,vehicleClass VARCHAR(75) null,certifiedVehicleType VARCHAR(75) null,certifiedVehicleTypeDescription VARCHAR(75) null,certifiedTrademark VARCHAR(75) null,certifiedTrademarkName VARCHAR(75) null,certifiedCommercialName VARCHAR(75) null,certifiedModelCode VARCHAR(75) null,productionCountry VARCHAR(75) null,safetytestReportNo VARCHAR(75) null,safetytestReportDate DATE null,emissionTestReportNo VARCHAR(75) null,emissionTestReportDate DATE null,commonSafetyStandard VARCHAR(75) null,commonSafetyDescription VARCHAR(75) null,emissionStandard VARCHAR(75) null,emissionDescription VARCHAR(75) null,othertestReportNo VARCHAR(75) null,othertestReportDate DATE null,copReportNo VARCHAR(75) null,copReportDate DATE null,copReportExpireDate DATE null,validRequestNo VARCHAR(75) null,validRequestDate DATE null,validInspectionRecordNo VARCHAR(75) null,validInspectionRecordDate DATE null,validCorporationId LONG,validInspectorId LONG,validInspectorName VARCHAR(75) null,validRemarks VARCHAR(75) null,validInspectionNote VARCHAR(75) null,deliverableFileEntryId LONG,documentFileEntryId LONG,modifyDate DATE null,syncDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table vr_expire_certificate";
	public static final String ORDER_BY_JPQL = " ORDER BY vrExpireCertificate.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_expire_certificate.id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.VRExpireCertificate"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.VRExpireCertificate"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.business.model.VRExpireCertificate"),
			true);
	public static final long DOSSIERID_COLUMN_BITMASK = 1L;
	public static final long DOSSIERSTATUS_COLUMN_BITMASK = 2L;
	public static final long VEHICLETYPECERTIFICATEID_COLUMN_BITMASK = 4L;
	public static final long ID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.VRExpireCertificate"));

	public VRExpireCertificateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VRExpireCertificate.class;
	}

	@Override
	public String getModelClassName() {
		return VRExpireCertificate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("mtCore", getMtCore());
		attributes.put("convertAssembleId", getConvertAssembleId());
		attributes.put("validDossierId", getValidDossierId());
		attributes.put("validDossierIdCTN", getValidDossierIdCTN());
		attributes.put("validDossierNo", getValidDossierNo());
		attributes.put("vehicleTypeCertificateId", getVehicleTypeCertificateId());
		attributes.put("dossierId", getDossierId());
		attributes.put("dossierIdCTN", getDossierIdCTN());
		attributes.put("dossierNo", getDossierNo());
		attributes.put("dossierStatus", getDossierStatus());
		attributes.put("previousExpireDate", getPreviousExpireDate());
		attributes.put("certificateRecordNo", getCertificateRecordNo());
		attributes.put("certificateRecordDate", getCertificateRecordDate());
		attributes.put("certificateRecordExpireDate",
			getCertificateRecordExpireDate());
		attributes.put("expiredStatus", getExpiredStatus());
		attributes.put("vehicleClass", getVehicleClass());
		attributes.put("certifiedVehicleType", getCertifiedVehicleType());
		attributes.put("certifiedVehicleTypeDescription",
			getCertifiedVehicleTypeDescription());
		attributes.put("certifiedTrademark", getCertifiedTrademark());
		attributes.put("certifiedTrademarkName", getCertifiedTrademarkName());
		attributes.put("certifiedCommercialName", getCertifiedCommercialName());
		attributes.put("certifiedModelCode", getCertifiedModelCode());
		attributes.put("productionCountry", getProductionCountry());
		attributes.put("safetytestReportNo", getSafetytestReportNo());
		attributes.put("safetytestReportDate", getSafetytestReportDate());
		attributes.put("emissionTestReportNo", getEmissionTestReportNo());
		attributes.put("emissionTestReportDate", getEmissionTestReportDate());
		attributes.put("commonSafetyStandard", getCommonSafetyStandard());
		attributes.put("commonSafetyDescription", getCommonSafetyDescription());
		attributes.put("emissionStandard", getEmissionStandard());
		attributes.put("emissionDescription", getEmissionDescription());
		attributes.put("othertestReportNo", getOthertestReportNo());
		attributes.put("othertestReportDate", getOthertestReportDate());
		attributes.put("copReportNo", getCopReportNo());
		attributes.put("copReportDate", getCopReportDate());
		attributes.put("copReportExpireDate", getCopReportExpireDate());
		attributes.put("validRequestNo", getValidRequestNo());
		attributes.put("validRequestDate", getValidRequestDate());
		attributes.put("validInspectionRecordNo", getValidInspectionRecordNo());
		attributes.put("validInspectionRecordDate",
			getValidInspectionRecordDate());
		attributes.put("validCorporationId", getValidCorporationId());
		attributes.put("validInspectorId", getValidInspectorId());
		attributes.put("validInspectorName", getValidInspectorName());
		attributes.put("validRemarks", getValidRemarks());
		attributes.put("validInspectionNote", getValidInspectionNote());
		attributes.put("deliverableFileEntryId", getDeliverableFileEntryId());
		attributes.put("documentFileEntryId", getDocumentFileEntryId());
		attributes.put("modifyDate", getModifyDate());
		attributes.put("syncDate", getSyncDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long mtCore = (Long)attributes.get("mtCore");

		if (mtCore != null) {
			setMtCore(mtCore);
		}

		Long convertAssembleId = (Long)attributes.get("convertAssembleId");

		if (convertAssembleId != null) {
			setConvertAssembleId(convertAssembleId);
		}

		Long validDossierId = (Long)attributes.get("validDossierId");

		if (validDossierId != null) {
			setValidDossierId(validDossierId);
		}

		String validDossierIdCTN = (String)attributes.get("validDossierIdCTN");

		if (validDossierIdCTN != null) {
			setValidDossierIdCTN(validDossierIdCTN);
		}

		String validDossierNo = (String)attributes.get("validDossierNo");

		if (validDossierNo != null) {
			setValidDossierNo(validDossierNo);
		}

		Long vehicleTypeCertificateId = (Long)attributes.get(
				"vehicleTypeCertificateId");

		if (vehicleTypeCertificateId != null) {
			setVehicleTypeCertificateId(vehicleTypeCertificateId);
		}

		Long dossierId = (Long)attributes.get("dossierId");

		if (dossierId != null) {
			setDossierId(dossierId);
		}

		String dossierIdCTN = (String)attributes.get("dossierIdCTN");

		if (dossierIdCTN != null) {
			setDossierIdCTN(dossierIdCTN);
		}

		String dossierNo = (String)attributes.get("dossierNo");

		if (dossierNo != null) {
			setDossierNo(dossierNo);
		}

		String dossierStatus = (String)attributes.get("dossierStatus");

		if (dossierStatus != null) {
			setDossierStatus(dossierStatus);
		}

		Date previousExpireDate = (Date)attributes.get("previousExpireDate");

		if (previousExpireDate != null) {
			setPreviousExpireDate(previousExpireDate);
		}

		String certificateRecordNo = (String)attributes.get(
				"certificateRecordNo");

		if (certificateRecordNo != null) {
			setCertificateRecordNo(certificateRecordNo);
		}

		Date certificateRecordDate = (Date)attributes.get(
				"certificateRecordDate");

		if (certificateRecordDate != null) {
			setCertificateRecordDate(certificateRecordDate);
		}

		Date certificateRecordExpireDate = (Date)attributes.get(
				"certificateRecordExpireDate");

		if (certificateRecordExpireDate != null) {
			setCertificateRecordExpireDate(certificateRecordExpireDate);
		}

		Integer expiredStatus = (Integer)attributes.get("expiredStatus");

		if (expiredStatus != null) {
			setExpiredStatus(expiredStatus);
		}

		String vehicleClass = (String)attributes.get("vehicleClass");

		if (vehicleClass != null) {
			setVehicleClass(vehicleClass);
		}

		String certifiedVehicleType = (String)attributes.get(
				"certifiedVehicleType");

		if (certifiedVehicleType != null) {
			setCertifiedVehicleType(certifiedVehicleType);
		}

		String certifiedVehicleTypeDescription = (String)attributes.get(
				"certifiedVehicleTypeDescription");

		if (certifiedVehicleTypeDescription != null) {
			setCertifiedVehicleTypeDescription(certifiedVehicleTypeDescription);
		}

		String certifiedTrademark = (String)attributes.get("certifiedTrademark");

		if (certifiedTrademark != null) {
			setCertifiedTrademark(certifiedTrademark);
		}

		String certifiedTrademarkName = (String)attributes.get(
				"certifiedTrademarkName");

		if (certifiedTrademarkName != null) {
			setCertifiedTrademarkName(certifiedTrademarkName);
		}

		String certifiedCommercialName = (String)attributes.get(
				"certifiedCommercialName");

		if (certifiedCommercialName != null) {
			setCertifiedCommercialName(certifiedCommercialName);
		}

		String certifiedModelCode = (String)attributes.get("certifiedModelCode");

		if (certifiedModelCode != null) {
			setCertifiedModelCode(certifiedModelCode);
		}

		String productionCountry = (String)attributes.get("productionCountry");

		if (productionCountry != null) {
			setProductionCountry(productionCountry);
		}

		String safetytestReportNo = (String)attributes.get("safetytestReportNo");

		if (safetytestReportNo != null) {
			setSafetytestReportNo(safetytestReportNo);
		}

		Date safetytestReportDate = (Date)attributes.get("safetytestReportDate");

		if (safetytestReportDate != null) {
			setSafetytestReportDate(safetytestReportDate);
		}

		String emissionTestReportNo = (String)attributes.get(
				"emissionTestReportNo");

		if (emissionTestReportNo != null) {
			setEmissionTestReportNo(emissionTestReportNo);
		}

		Date emissionTestReportDate = (Date)attributes.get(
				"emissionTestReportDate");

		if (emissionTestReportDate != null) {
			setEmissionTestReportDate(emissionTestReportDate);
		}

		String commonSafetyStandard = (String)attributes.get(
				"commonSafetyStandard");

		if (commonSafetyStandard != null) {
			setCommonSafetyStandard(commonSafetyStandard);
		}

		String commonSafetyDescription = (String)attributes.get(
				"commonSafetyDescription");

		if (commonSafetyDescription != null) {
			setCommonSafetyDescription(commonSafetyDescription);
		}

		String emissionStandard = (String)attributes.get("emissionStandard");

		if (emissionStandard != null) {
			setEmissionStandard(emissionStandard);
		}

		String emissionDescription = (String)attributes.get(
				"emissionDescription");

		if (emissionDescription != null) {
			setEmissionDescription(emissionDescription);
		}

		String othertestReportNo = (String)attributes.get("othertestReportNo");

		if (othertestReportNo != null) {
			setOthertestReportNo(othertestReportNo);
		}

		Date othertestReportDate = (Date)attributes.get("othertestReportDate");

		if (othertestReportDate != null) {
			setOthertestReportDate(othertestReportDate);
		}

		String copReportNo = (String)attributes.get("copReportNo");

		if (copReportNo != null) {
			setCopReportNo(copReportNo);
		}

		Date copReportDate = (Date)attributes.get("copReportDate");

		if (copReportDate != null) {
			setCopReportDate(copReportDate);
		}

		Date copReportExpireDate = (Date)attributes.get("copReportExpireDate");

		if (copReportExpireDate != null) {
			setCopReportExpireDate(copReportExpireDate);
		}

		String validRequestNo = (String)attributes.get("validRequestNo");

		if (validRequestNo != null) {
			setValidRequestNo(validRequestNo);
		}

		Date validRequestDate = (Date)attributes.get("validRequestDate");

		if (validRequestDate != null) {
			setValidRequestDate(validRequestDate);
		}

		String validInspectionRecordNo = (String)attributes.get(
				"validInspectionRecordNo");

		if (validInspectionRecordNo != null) {
			setValidInspectionRecordNo(validInspectionRecordNo);
		}

		Date validInspectionRecordDate = (Date)attributes.get(
				"validInspectionRecordDate");

		if (validInspectionRecordDate != null) {
			setValidInspectionRecordDate(validInspectionRecordDate);
		}

		Long validCorporationId = (Long)attributes.get("validCorporationId");

		if (validCorporationId != null) {
			setValidCorporationId(validCorporationId);
		}

		Long validInspectorId = (Long)attributes.get("validInspectorId");

		if (validInspectorId != null) {
			setValidInspectorId(validInspectorId);
		}

		String validInspectorName = (String)attributes.get("validInspectorName");

		if (validInspectorName != null) {
			setValidInspectorName(validInspectorName);
		}

		String validRemarks = (String)attributes.get("validRemarks");

		if (validRemarks != null) {
			setValidRemarks(validRemarks);
		}

		String validInspectionNote = (String)attributes.get(
				"validInspectionNote");

		if (validInspectionNote != null) {
			setValidInspectionNote(validInspectionNote);
		}

		Long deliverableFileEntryId = (Long)attributes.get(
				"deliverableFileEntryId");

		if (deliverableFileEntryId != null) {
			setDeliverableFileEntryId(deliverableFileEntryId);
		}

		Long documentFileEntryId = (Long)attributes.get("documentFileEntryId");

		if (documentFileEntryId != null) {
			setDocumentFileEntryId(documentFileEntryId);
		}

		Date modifyDate = (Date)attributes.get("modifyDate");

		if (modifyDate != null) {
			setModifyDate(modifyDate);
		}

		Date syncDate = (Date)attributes.get("syncDate");

		if (syncDate != null) {
			setSyncDate(syncDate);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getMtCore() {
		return _mtCore;
	}

	@Override
	public void setMtCore(long mtCore) {
		_mtCore = mtCore;
	}

	@Override
	public long getConvertAssembleId() {
		return _convertAssembleId;
	}

	@Override
	public void setConvertAssembleId(long convertAssembleId) {
		_convertAssembleId = convertAssembleId;
	}

	@Override
	public long getValidDossierId() {
		return _validDossierId;
	}

	@Override
	public void setValidDossierId(long validDossierId) {
		_validDossierId = validDossierId;
	}

	@Override
	public String getValidDossierIdCTN() {
		if (_validDossierIdCTN == null) {
			return StringPool.BLANK;
		}
		else {
			return _validDossierIdCTN;
		}
	}

	@Override
	public void setValidDossierIdCTN(String validDossierIdCTN) {
		_validDossierIdCTN = validDossierIdCTN;
	}

	@Override
	public String getValidDossierNo() {
		if (_validDossierNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _validDossierNo;
		}
	}

	@Override
	public void setValidDossierNo(String validDossierNo) {
		_validDossierNo = validDossierNo;
	}

	@Override
	public long getVehicleTypeCertificateId() {
		return _vehicleTypeCertificateId;
	}

	@Override
	public void setVehicleTypeCertificateId(long vehicleTypeCertificateId) {
		_columnBitmask |= VEHICLETYPECERTIFICATEID_COLUMN_BITMASK;

		if (!_setOriginalVehicleTypeCertificateId) {
			_setOriginalVehicleTypeCertificateId = true;

			_originalVehicleTypeCertificateId = _vehicleTypeCertificateId;
		}

		_vehicleTypeCertificateId = vehicleTypeCertificateId;
	}

	public long getOriginalVehicleTypeCertificateId() {
		return _originalVehicleTypeCertificateId;
	}

	@Override
	public long getDossierId() {
		return _dossierId;
	}

	@Override
	public void setDossierId(long dossierId) {
		_columnBitmask |= DOSSIERID_COLUMN_BITMASK;

		if (!_setOriginalDossierId) {
			_setOriginalDossierId = true;

			_originalDossierId = _dossierId;
		}

		_dossierId = dossierId;
	}

	public long getOriginalDossierId() {
		return _originalDossierId;
	}

	@Override
	public String getDossierIdCTN() {
		if (_dossierIdCTN == null) {
			return StringPool.BLANK;
		}
		else {
			return _dossierIdCTN;
		}
	}

	@Override
	public void setDossierIdCTN(String dossierIdCTN) {
		_dossierIdCTN = dossierIdCTN;
	}

	@Override
	public String getDossierNo() {
		if (_dossierNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _dossierNo;
		}
	}

	@Override
	public void setDossierNo(String dossierNo) {
		_dossierNo = dossierNo;
	}

	@Override
	public String getDossierStatus() {
		if (_dossierStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _dossierStatus;
		}
	}

	@Override
	public void setDossierStatus(String dossierStatus) {
		_columnBitmask |= DOSSIERSTATUS_COLUMN_BITMASK;

		if (_originalDossierStatus == null) {
			_originalDossierStatus = _dossierStatus;
		}

		_dossierStatus = dossierStatus;
	}

	public String getOriginalDossierStatus() {
		return GetterUtil.getString(_originalDossierStatus);
	}

	@Override
	public Date getPreviousExpireDate() {
		return _previousExpireDate;
	}

	@Override
	public void setPreviousExpireDate(Date previousExpireDate) {
		_previousExpireDate = previousExpireDate;
	}

	@Override
	public String getCertificateRecordNo() {
		if (_certificateRecordNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateRecordNo;
		}
	}

	@Override
	public void setCertificateRecordNo(String certificateRecordNo) {
		_certificateRecordNo = certificateRecordNo;
	}

	@Override
	public Date getCertificateRecordDate() {
		return _certificateRecordDate;
	}

	@Override
	public void setCertificateRecordDate(Date certificateRecordDate) {
		_certificateRecordDate = certificateRecordDate;
	}

	@Override
	public Date getCertificateRecordExpireDate() {
		return _certificateRecordExpireDate;
	}

	@Override
	public void setCertificateRecordExpireDate(Date certificateRecordExpireDate) {
		_certificateRecordExpireDate = certificateRecordExpireDate;
	}

	@Override
	public int getExpiredStatus() {
		return _expiredStatus;
	}

	@Override
	public void setExpiredStatus(int expiredStatus) {
		_expiredStatus = expiredStatus;
	}

	@Override
	public String getVehicleClass() {
		if (_vehicleClass == null) {
			return StringPool.BLANK;
		}
		else {
			return _vehicleClass;
		}
	}

	@Override
	public void setVehicleClass(String vehicleClass) {
		_vehicleClass = vehicleClass;
	}

	@Override
	public String getCertifiedVehicleType() {
		if (_certifiedVehicleType == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedVehicleType;
		}
	}

	@Override
	public void setCertifiedVehicleType(String certifiedVehicleType) {
		_certifiedVehicleType = certifiedVehicleType;
	}

	@Override
	public String getCertifiedVehicleTypeDescription() {
		if (_certifiedVehicleTypeDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedVehicleTypeDescription;
		}
	}

	@Override
	public void setCertifiedVehicleTypeDescription(
		String certifiedVehicleTypeDescription) {
		_certifiedVehicleTypeDescription = certifiedVehicleTypeDescription;
	}

	@Override
	public String getCertifiedTrademark() {
		if (_certifiedTrademark == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedTrademark;
		}
	}

	@Override
	public void setCertifiedTrademark(String certifiedTrademark) {
		_certifiedTrademark = certifiedTrademark;
	}

	@Override
	public String getCertifiedTrademarkName() {
		if (_certifiedTrademarkName == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedTrademarkName;
		}
	}

	@Override
	public void setCertifiedTrademarkName(String certifiedTrademarkName) {
		_certifiedTrademarkName = certifiedTrademarkName;
	}

	@Override
	public String getCertifiedCommercialName() {
		if (_certifiedCommercialName == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedCommercialName;
		}
	}

	@Override
	public void setCertifiedCommercialName(String certifiedCommercialName) {
		_certifiedCommercialName = certifiedCommercialName;
	}

	@Override
	public String getCertifiedModelCode() {
		if (_certifiedModelCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedModelCode;
		}
	}

	@Override
	public void setCertifiedModelCode(String certifiedModelCode) {
		_certifiedModelCode = certifiedModelCode;
	}

	@Override
	public String getProductionCountry() {
		if (_productionCountry == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionCountry;
		}
	}

	@Override
	public void setProductionCountry(String productionCountry) {
		_productionCountry = productionCountry;
	}

	@Override
	public String getSafetytestReportNo() {
		if (_safetytestReportNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _safetytestReportNo;
		}
	}

	@Override
	public void setSafetytestReportNo(String safetytestReportNo) {
		_safetytestReportNo = safetytestReportNo;
	}

	@Override
	public Date getSafetytestReportDate() {
		return _safetytestReportDate;
	}

	@Override
	public void setSafetytestReportDate(Date safetytestReportDate) {
		_safetytestReportDate = safetytestReportDate;
	}

	@Override
	public String getEmissionTestReportNo() {
		if (_emissionTestReportNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _emissionTestReportNo;
		}
	}

	@Override
	public void setEmissionTestReportNo(String emissionTestReportNo) {
		_emissionTestReportNo = emissionTestReportNo;
	}

	@Override
	public Date getEmissionTestReportDate() {
		return _emissionTestReportDate;
	}

	@Override
	public void setEmissionTestReportDate(Date emissionTestReportDate) {
		_emissionTestReportDate = emissionTestReportDate;
	}

	@Override
	public String getCommonSafetyStandard() {
		if (_commonSafetyStandard == null) {
			return StringPool.BLANK;
		}
		else {
			return _commonSafetyStandard;
		}
	}

	@Override
	public void setCommonSafetyStandard(String commonSafetyStandard) {
		_commonSafetyStandard = commonSafetyStandard;
	}

	@Override
	public String getCommonSafetyDescription() {
		if (_commonSafetyDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _commonSafetyDescription;
		}
	}

	@Override
	public void setCommonSafetyDescription(String commonSafetyDescription) {
		_commonSafetyDescription = commonSafetyDescription;
	}

	@Override
	public String getEmissionStandard() {
		if (_emissionStandard == null) {
			return StringPool.BLANK;
		}
		else {
			return _emissionStandard;
		}
	}

	@Override
	public void setEmissionStandard(String emissionStandard) {
		_emissionStandard = emissionStandard;
	}

	@Override
	public String getEmissionDescription() {
		if (_emissionDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _emissionDescription;
		}
	}

	@Override
	public void setEmissionDescription(String emissionDescription) {
		_emissionDescription = emissionDescription;
	}

	@Override
	public String getOthertestReportNo() {
		if (_othertestReportNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _othertestReportNo;
		}
	}

	@Override
	public void setOthertestReportNo(String othertestReportNo) {
		_othertestReportNo = othertestReportNo;
	}

	@Override
	public Date getOthertestReportDate() {
		return _othertestReportDate;
	}

	@Override
	public void setOthertestReportDate(Date othertestReportDate) {
		_othertestReportDate = othertestReportDate;
	}

	@Override
	public String getCopReportNo() {
		if (_copReportNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportNo;
		}
	}

	@Override
	public void setCopReportNo(String copReportNo) {
		_copReportNo = copReportNo;
	}

	@Override
	public Date getCopReportDate() {
		return _copReportDate;
	}

	@Override
	public void setCopReportDate(Date copReportDate) {
		_copReportDate = copReportDate;
	}

	@Override
	public Date getCopReportExpireDate() {
		return _copReportExpireDate;
	}

	@Override
	public void setCopReportExpireDate(Date copReportExpireDate) {
		_copReportExpireDate = copReportExpireDate;
	}

	@Override
	public String getValidRequestNo() {
		if (_validRequestNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _validRequestNo;
		}
	}

	@Override
	public void setValidRequestNo(String validRequestNo) {
		_validRequestNo = validRequestNo;
	}

	@Override
	public Date getValidRequestDate() {
		return _validRequestDate;
	}

	@Override
	public void setValidRequestDate(Date validRequestDate) {
		_validRequestDate = validRequestDate;
	}

	@Override
	public String getValidInspectionRecordNo() {
		if (_validInspectionRecordNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _validInspectionRecordNo;
		}
	}

	@Override
	public void setValidInspectionRecordNo(String validInspectionRecordNo) {
		_validInspectionRecordNo = validInspectionRecordNo;
	}

	@Override
	public Date getValidInspectionRecordDate() {
		return _validInspectionRecordDate;
	}

	@Override
	public void setValidInspectionRecordDate(Date validInspectionRecordDate) {
		_validInspectionRecordDate = validInspectionRecordDate;
	}

	@Override
	public long getValidCorporationId() {
		return _validCorporationId;
	}

	@Override
	public void setValidCorporationId(long validCorporationId) {
		_validCorporationId = validCorporationId;
	}

	@Override
	public long getValidInspectorId() {
		return _validInspectorId;
	}

	@Override
	public void setValidInspectorId(long validInspectorId) {
		_validInspectorId = validInspectorId;
	}

	@Override
	public String getValidInspectorName() {
		if (_validInspectorName == null) {
			return StringPool.BLANK;
		}
		else {
			return _validInspectorName;
		}
	}

	@Override
	public void setValidInspectorName(String validInspectorName) {
		_validInspectorName = validInspectorName;
	}

	@Override
	public String getValidRemarks() {
		if (_validRemarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _validRemarks;
		}
	}

	@Override
	public void setValidRemarks(String validRemarks) {
		_validRemarks = validRemarks;
	}

	@Override
	public String getValidInspectionNote() {
		if (_validInspectionNote == null) {
			return StringPool.BLANK;
		}
		else {
			return _validInspectionNote;
		}
	}

	@Override
	public void setValidInspectionNote(String validInspectionNote) {
		_validInspectionNote = validInspectionNote;
	}

	@Override
	public long getDeliverableFileEntryId() {
		return _deliverableFileEntryId;
	}

	@Override
	public void setDeliverableFileEntryId(long deliverableFileEntryId) {
		_deliverableFileEntryId = deliverableFileEntryId;
	}

	@Override
	public long getDocumentFileEntryId() {
		return _documentFileEntryId;
	}

	@Override
	public void setDocumentFileEntryId(long documentFileEntryId) {
		_documentFileEntryId = documentFileEntryId;
	}

	@Override
	public Date getModifyDate() {
		return _modifyDate;
	}

	@Override
	public void setModifyDate(Date modifyDate) {
		_modifyDate = modifyDate;
	}

	@Override
	public Date getSyncDate() {
		return _syncDate;
	}

	@Override
	public void setSyncDate(Date syncDate) {
		_syncDate = syncDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VRExpireCertificate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VRExpireCertificate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VRExpireCertificate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VRExpireCertificateImpl vrExpireCertificateImpl = new VRExpireCertificateImpl();

		vrExpireCertificateImpl.setId(getId());
		vrExpireCertificateImpl.setMtCore(getMtCore());
		vrExpireCertificateImpl.setConvertAssembleId(getConvertAssembleId());
		vrExpireCertificateImpl.setValidDossierId(getValidDossierId());
		vrExpireCertificateImpl.setValidDossierIdCTN(getValidDossierIdCTN());
		vrExpireCertificateImpl.setValidDossierNo(getValidDossierNo());
		vrExpireCertificateImpl.setVehicleTypeCertificateId(getVehicleTypeCertificateId());
		vrExpireCertificateImpl.setDossierId(getDossierId());
		vrExpireCertificateImpl.setDossierIdCTN(getDossierIdCTN());
		vrExpireCertificateImpl.setDossierNo(getDossierNo());
		vrExpireCertificateImpl.setDossierStatus(getDossierStatus());
		vrExpireCertificateImpl.setPreviousExpireDate(getPreviousExpireDate());
		vrExpireCertificateImpl.setCertificateRecordNo(getCertificateRecordNo());
		vrExpireCertificateImpl.setCertificateRecordDate(getCertificateRecordDate());
		vrExpireCertificateImpl.setCertificateRecordExpireDate(getCertificateRecordExpireDate());
		vrExpireCertificateImpl.setExpiredStatus(getExpiredStatus());
		vrExpireCertificateImpl.setVehicleClass(getVehicleClass());
		vrExpireCertificateImpl.setCertifiedVehicleType(getCertifiedVehicleType());
		vrExpireCertificateImpl.setCertifiedVehicleTypeDescription(getCertifiedVehicleTypeDescription());
		vrExpireCertificateImpl.setCertifiedTrademark(getCertifiedTrademark());
		vrExpireCertificateImpl.setCertifiedTrademarkName(getCertifiedTrademarkName());
		vrExpireCertificateImpl.setCertifiedCommercialName(getCertifiedCommercialName());
		vrExpireCertificateImpl.setCertifiedModelCode(getCertifiedModelCode());
		vrExpireCertificateImpl.setProductionCountry(getProductionCountry());
		vrExpireCertificateImpl.setSafetytestReportNo(getSafetytestReportNo());
		vrExpireCertificateImpl.setSafetytestReportDate(getSafetytestReportDate());
		vrExpireCertificateImpl.setEmissionTestReportNo(getEmissionTestReportNo());
		vrExpireCertificateImpl.setEmissionTestReportDate(getEmissionTestReportDate());
		vrExpireCertificateImpl.setCommonSafetyStandard(getCommonSafetyStandard());
		vrExpireCertificateImpl.setCommonSafetyDescription(getCommonSafetyDescription());
		vrExpireCertificateImpl.setEmissionStandard(getEmissionStandard());
		vrExpireCertificateImpl.setEmissionDescription(getEmissionDescription());
		vrExpireCertificateImpl.setOthertestReportNo(getOthertestReportNo());
		vrExpireCertificateImpl.setOthertestReportDate(getOthertestReportDate());
		vrExpireCertificateImpl.setCopReportNo(getCopReportNo());
		vrExpireCertificateImpl.setCopReportDate(getCopReportDate());
		vrExpireCertificateImpl.setCopReportExpireDate(getCopReportExpireDate());
		vrExpireCertificateImpl.setValidRequestNo(getValidRequestNo());
		vrExpireCertificateImpl.setValidRequestDate(getValidRequestDate());
		vrExpireCertificateImpl.setValidInspectionRecordNo(getValidInspectionRecordNo());
		vrExpireCertificateImpl.setValidInspectionRecordDate(getValidInspectionRecordDate());
		vrExpireCertificateImpl.setValidCorporationId(getValidCorporationId());
		vrExpireCertificateImpl.setValidInspectorId(getValidInspectorId());
		vrExpireCertificateImpl.setValidInspectorName(getValidInspectorName());
		vrExpireCertificateImpl.setValidRemarks(getValidRemarks());
		vrExpireCertificateImpl.setValidInspectionNote(getValidInspectionNote());
		vrExpireCertificateImpl.setDeliverableFileEntryId(getDeliverableFileEntryId());
		vrExpireCertificateImpl.setDocumentFileEntryId(getDocumentFileEntryId());
		vrExpireCertificateImpl.setModifyDate(getModifyDate());
		vrExpireCertificateImpl.setSyncDate(getSyncDate());

		vrExpireCertificateImpl.resetOriginalValues();

		return vrExpireCertificateImpl;
	}

	@Override
	public int compareTo(VRExpireCertificate vrExpireCertificate) {
		long primaryKey = vrExpireCertificate.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VRExpireCertificate)) {
			return false;
		}

		VRExpireCertificate vrExpireCertificate = (VRExpireCertificate)obj;

		long primaryKey = vrExpireCertificate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VRExpireCertificateModelImpl vrExpireCertificateModelImpl = this;

		vrExpireCertificateModelImpl._originalVehicleTypeCertificateId = vrExpireCertificateModelImpl._vehicleTypeCertificateId;

		vrExpireCertificateModelImpl._setOriginalVehicleTypeCertificateId = false;

		vrExpireCertificateModelImpl._originalDossierId = vrExpireCertificateModelImpl._dossierId;

		vrExpireCertificateModelImpl._setOriginalDossierId = false;

		vrExpireCertificateModelImpl._originalDossierStatus = vrExpireCertificateModelImpl._dossierStatus;

		vrExpireCertificateModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VRExpireCertificate> toCacheModel() {
		VRExpireCertificateCacheModel vrExpireCertificateCacheModel = new VRExpireCertificateCacheModel();

		vrExpireCertificateCacheModel.id = getId();

		vrExpireCertificateCacheModel.mtCore = getMtCore();

		vrExpireCertificateCacheModel.convertAssembleId = getConvertAssembleId();

		vrExpireCertificateCacheModel.validDossierId = getValidDossierId();

		vrExpireCertificateCacheModel.validDossierIdCTN = getValidDossierIdCTN();

		String validDossierIdCTN = vrExpireCertificateCacheModel.validDossierIdCTN;

		if ((validDossierIdCTN != null) && (validDossierIdCTN.length() == 0)) {
			vrExpireCertificateCacheModel.validDossierIdCTN = null;
		}

		vrExpireCertificateCacheModel.validDossierNo = getValidDossierNo();

		String validDossierNo = vrExpireCertificateCacheModel.validDossierNo;

		if ((validDossierNo != null) && (validDossierNo.length() == 0)) {
			vrExpireCertificateCacheModel.validDossierNo = null;
		}

		vrExpireCertificateCacheModel.vehicleTypeCertificateId = getVehicleTypeCertificateId();

		vrExpireCertificateCacheModel.dossierId = getDossierId();

		vrExpireCertificateCacheModel.dossierIdCTN = getDossierIdCTN();

		String dossierIdCTN = vrExpireCertificateCacheModel.dossierIdCTN;

		if ((dossierIdCTN != null) && (dossierIdCTN.length() == 0)) {
			vrExpireCertificateCacheModel.dossierIdCTN = null;
		}

		vrExpireCertificateCacheModel.dossierNo = getDossierNo();

		String dossierNo = vrExpireCertificateCacheModel.dossierNo;

		if ((dossierNo != null) && (dossierNo.length() == 0)) {
			vrExpireCertificateCacheModel.dossierNo = null;
		}

		vrExpireCertificateCacheModel.dossierStatus = getDossierStatus();

		String dossierStatus = vrExpireCertificateCacheModel.dossierStatus;

		if ((dossierStatus != null) && (dossierStatus.length() == 0)) {
			vrExpireCertificateCacheModel.dossierStatus = null;
		}

		Date previousExpireDate = getPreviousExpireDate();

		if (previousExpireDate != null) {
			vrExpireCertificateCacheModel.previousExpireDate = previousExpireDate.getTime();
		}
		else {
			vrExpireCertificateCacheModel.previousExpireDate = Long.MIN_VALUE;
		}

		vrExpireCertificateCacheModel.certificateRecordNo = getCertificateRecordNo();

		String certificateRecordNo = vrExpireCertificateCacheModel.certificateRecordNo;

		if ((certificateRecordNo != null) &&
				(certificateRecordNo.length() == 0)) {
			vrExpireCertificateCacheModel.certificateRecordNo = null;
		}

		Date certificateRecordDate = getCertificateRecordDate();

		if (certificateRecordDate != null) {
			vrExpireCertificateCacheModel.certificateRecordDate = certificateRecordDate.getTime();
		}
		else {
			vrExpireCertificateCacheModel.certificateRecordDate = Long.MIN_VALUE;
		}

		Date certificateRecordExpireDate = getCertificateRecordExpireDate();

		if (certificateRecordExpireDate != null) {
			vrExpireCertificateCacheModel.certificateRecordExpireDate = certificateRecordExpireDate.getTime();
		}
		else {
			vrExpireCertificateCacheModel.certificateRecordExpireDate = Long.MIN_VALUE;
		}

		vrExpireCertificateCacheModel.expiredStatus = getExpiredStatus();

		vrExpireCertificateCacheModel.vehicleClass = getVehicleClass();

		String vehicleClass = vrExpireCertificateCacheModel.vehicleClass;

		if ((vehicleClass != null) && (vehicleClass.length() == 0)) {
			vrExpireCertificateCacheModel.vehicleClass = null;
		}

		vrExpireCertificateCacheModel.certifiedVehicleType = getCertifiedVehicleType();

		String certifiedVehicleType = vrExpireCertificateCacheModel.certifiedVehicleType;

		if ((certifiedVehicleType != null) &&
				(certifiedVehicleType.length() == 0)) {
			vrExpireCertificateCacheModel.certifiedVehicleType = null;
		}

		vrExpireCertificateCacheModel.certifiedVehicleTypeDescription = getCertifiedVehicleTypeDescription();

		String certifiedVehicleTypeDescription = vrExpireCertificateCacheModel.certifiedVehicleTypeDescription;

		if ((certifiedVehicleTypeDescription != null) &&
				(certifiedVehicleTypeDescription.length() == 0)) {
			vrExpireCertificateCacheModel.certifiedVehicleTypeDescription = null;
		}

		vrExpireCertificateCacheModel.certifiedTrademark = getCertifiedTrademark();

		String certifiedTrademark = vrExpireCertificateCacheModel.certifiedTrademark;

		if ((certifiedTrademark != null) && (certifiedTrademark.length() == 0)) {
			vrExpireCertificateCacheModel.certifiedTrademark = null;
		}

		vrExpireCertificateCacheModel.certifiedTrademarkName = getCertifiedTrademarkName();

		String certifiedTrademarkName = vrExpireCertificateCacheModel.certifiedTrademarkName;

		if ((certifiedTrademarkName != null) &&
				(certifiedTrademarkName.length() == 0)) {
			vrExpireCertificateCacheModel.certifiedTrademarkName = null;
		}

		vrExpireCertificateCacheModel.certifiedCommercialName = getCertifiedCommercialName();

		String certifiedCommercialName = vrExpireCertificateCacheModel.certifiedCommercialName;

		if ((certifiedCommercialName != null) &&
				(certifiedCommercialName.length() == 0)) {
			vrExpireCertificateCacheModel.certifiedCommercialName = null;
		}

		vrExpireCertificateCacheModel.certifiedModelCode = getCertifiedModelCode();

		String certifiedModelCode = vrExpireCertificateCacheModel.certifiedModelCode;

		if ((certifiedModelCode != null) && (certifiedModelCode.length() == 0)) {
			vrExpireCertificateCacheModel.certifiedModelCode = null;
		}

		vrExpireCertificateCacheModel.productionCountry = getProductionCountry();

		String productionCountry = vrExpireCertificateCacheModel.productionCountry;

		if ((productionCountry != null) && (productionCountry.length() == 0)) {
			vrExpireCertificateCacheModel.productionCountry = null;
		}

		vrExpireCertificateCacheModel.safetytestReportNo = getSafetytestReportNo();

		String safetytestReportNo = vrExpireCertificateCacheModel.safetytestReportNo;

		if ((safetytestReportNo != null) && (safetytestReportNo.length() == 0)) {
			vrExpireCertificateCacheModel.safetytestReportNo = null;
		}

		Date safetytestReportDate = getSafetytestReportDate();

		if (safetytestReportDate != null) {
			vrExpireCertificateCacheModel.safetytestReportDate = safetytestReportDate.getTime();
		}
		else {
			vrExpireCertificateCacheModel.safetytestReportDate = Long.MIN_VALUE;
		}

		vrExpireCertificateCacheModel.emissionTestReportNo = getEmissionTestReportNo();

		String emissionTestReportNo = vrExpireCertificateCacheModel.emissionTestReportNo;

		if ((emissionTestReportNo != null) &&
				(emissionTestReportNo.length() == 0)) {
			vrExpireCertificateCacheModel.emissionTestReportNo = null;
		}

		Date emissionTestReportDate = getEmissionTestReportDate();

		if (emissionTestReportDate != null) {
			vrExpireCertificateCacheModel.emissionTestReportDate = emissionTestReportDate.getTime();
		}
		else {
			vrExpireCertificateCacheModel.emissionTestReportDate = Long.MIN_VALUE;
		}

		vrExpireCertificateCacheModel.commonSafetyStandard = getCommonSafetyStandard();

		String commonSafetyStandard = vrExpireCertificateCacheModel.commonSafetyStandard;

		if ((commonSafetyStandard != null) &&
				(commonSafetyStandard.length() == 0)) {
			vrExpireCertificateCacheModel.commonSafetyStandard = null;
		}

		vrExpireCertificateCacheModel.commonSafetyDescription = getCommonSafetyDescription();

		String commonSafetyDescription = vrExpireCertificateCacheModel.commonSafetyDescription;

		if ((commonSafetyDescription != null) &&
				(commonSafetyDescription.length() == 0)) {
			vrExpireCertificateCacheModel.commonSafetyDescription = null;
		}

		vrExpireCertificateCacheModel.emissionStandard = getEmissionStandard();

		String emissionStandard = vrExpireCertificateCacheModel.emissionStandard;

		if ((emissionStandard != null) && (emissionStandard.length() == 0)) {
			vrExpireCertificateCacheModel.emissionStandard = null;
		}

		vrExpireCertificateCacheModel.emissionDescription = getEmissionDescription();

		String emissionDescription = vrExpireCertificateCacheModel.emissionDescription;

		if ((emissionDescription != null) &&
				(emissionDescription.length() == 0)) {
			vrExpireCertificateCacheModel.emissionDescription = null;
		}

		vrExpireCertificateCacheModel.othertestReportNo = getOthertestReportNo();

		String othertestReportNo = vrExpireCertificateCacheModel.othertestReportNo;

		if ((othertestReportNo != null) && (othertestReportNo.length() == 0)) {
			vrExpireCertificateCacheModel.othertestReportNo = null;
		}

		Date othertestReportDate = getOthertestReportDate();

		if (othertestReportDate != null) {
			vrExpireCertificateCacheModel.othertestReportDate = othertestReportDate.getTime();
		}
		else {
			vrExpireCertificateCacheModel.othertestReportDate = Long.MIN_VALUE;
		}

		vrExpireCertificateCacheModel.copReportNo = getCopReportNo();

		String copReportNo = vrExpireCertificateCacheModel.copReportNo;

		if ((copReportNo != null) && (copReportNo.length() == 0)) {
			vrExpireCertificateCacheModel.copReportNo = null;
		}

		Date copReportDate = getCopReportDate();

		if (copReportDate != null) {
			vrExpireCertificateCacheModel.copReportDate = copReportDate.getTime();
		}
		else {
			vrExpireCertificateCacheModel.copReportDate = Long.MIN_VALUE;
		}

		Date copReportExpireDate = getCopReportExpireDate();

		if (copReportExpireDate != null) {
			vrExpireCertificateCacheModel.copReportExpireDate = copReportExpireDate.getTime();
		}
		else {
			vrExpireCertificateCacheModel.copReportExpireDate = Long.MIN_VALUE;
		}

		vrExpireCertificateCacheModel.validRequestNo = getValidRequestNo();

		String validRequestNo = vrExpireCertificateCacheModel.validRequestNo;

		if ((validRequestNo != null) && (validRequestNo.length() == 0)) {
			vrExpireCertificateCacheModel.validRequestNo = null;
		}

		Date validRequestDate = getValidRequestDate();

		if (validRequestDate != null) {
			vrExpireCertificateCacheModel.validRequestDate = validRequestDate.getTime();
		}
		else {
			vrExpireCertificateCacheModel.validRequestDate = Long.MIN_VALUE;
		}

		vrExpireCertificateCacheModel.validInspectionRecordNo = getValidInspectionRecordNo();

		String validInspectionRecordNo = vrExpireCertificateCacheModel.validInspectionRecordNo;

		if ((validInspectionRecordNo != null) &&
				(validInspectionRecordNo.length() == 0)) {
			vrExpireCertificateCacheModel.validInspectionRecordNo = null;
		}

		Date validInspectionRecordDate = getValidInspectionRecordDate();

		if (validInspectionRecordDate != null) {
			vrExpireCertificateCacheModel.validInspectionRecordDate = validInspectionRecordDate.getTime();
		}
		else {
			vrExpireCertificateCacheModel.validInspectionRecordDate = Long.MIN_VALUE;
		}

		vrExpireCertificateCacheModel.validCorporationId = getValidCorporationId();

		vrExpireCertificateCacheModel.validInspectorId = getValidInspectorId();

		vrExpireCertificateCacheModel.validInspectorName = getValidInspectorName();

		String validInspectorName = vrExpireCertificateCacheModel.validInspectorName;

		if ((validInspectorName != null) && (validInspectorName.length() == 0)) {
			vrExpireCertificateCacheModel.validInspectorName = null;
		}

		vrExpireCertificateCacheModel.validRemarks = getValidRemarks();

		String validRemarks = vrExpireCertificateCacheModel.validRemarks;

		if ((validRemarks != null) && (validRemarks.length() == 0)) {
			vrExpireCertificateCacheModel.validRemarks = null;
		}

		vrExpireCertificateCacheModel.validInspectionNote = getValidInspectionNote();

		String validInspectionNote = vrExpireCertificateCacheModel.validInspectionNote;

		if ((validInspectionNote != null) &&
				(validInspectionNote.length() == 0)) {
			vrExpireCertificateCacheModel.validInspectionNote = null;
		}

		vrExpireCertificateCacheModel.deliverableFileEntryId = getDeliverableFileEntryId();

		vrExpireCertificateCacheModel.documentFileEntryId = getDocumentFileEntryId();

		Date modifyDate = getModifyDate();

		if (modifyDate != null) {
			vrExpireCertificateCacheModel.modifyDate = modifyDate.getTime();
		}
		else {
			vrExpireCertificateCacheModel.modifyDate = Long.MIN_VALUE;
		}

		Date syncDate = getSyncDate();

		if (syncDate != null) {
			vrExpireCertificateCacheModel.syncDate = syncDate.getTime();
		}
		else {
			vrExpireCertificateCacheModel.syncDate = Long.MIN_VALUE;
		}

		return vrExpireCertificateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(101);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", mtCore=");
		sb.append(getMtCore());
		sb.append(", convertAssembleId=");
		sb.append(getConvertAssembleId());
		sb.append(", validDossierId=");
		sb.append(getValidDossierId());
		sb.append(", validDossierIdCTN=");
		sb.append(getValidDossierIdCTN());
		sb.append(", validDossierNo=");
		sb.append(getValidDossierNo());
		sb.append(", vehicleTypeCertificateId=");
		sb.append(getVehicleTypeCertificateId());
		sb.append(", dossierId=");
		sb.append(getDossierId());
		sb.append(", dossierIdCTN=");
		sb.append(getDossierIdCTN());
		sb.append(", dossierNo=");
		sb.append(getDossierNo());
		sb.append(", dossierStatus=");
		sb.append(getDossierStatus());
		sb.append(", previousExpireDate=");
		sb.append(getPreviousExpireDate());
		sb.append(", certificateRecordNo=");
		sb.append(getCertificateRecordNo());
		sb.append(", certificateRecordDate=");
		sb.append(getCertificateRecordDate());
		sb.append(", certificateRecordExpireDate=");
		sb.append(getCertificateRecordExpireDate());
		sb.append(", expiredStatus=");
		sb.append(getExpiredStatus());
		sb.append(", vehicleClass=");
		sb.append(getVehicleClass());
		sb.append(", certifiedVehicleType=");
		sb.append(getCertifiedVehicleType());
		sb.append(", certifiedVehicleTypeDescription=");
		sb.append(getCertifiedVehicleTypeDescription());
		sb.append(", certifiedTrademark=");
		sb.append(getCertifiedTrademark());
		sb.append(", certifiedTrademarkName=");
		sb.append(getCertifiedTrademarkName());
		sb.append(", certifiedCommercialName=");
		sb.append(getCertifiedCommercialName());
		sb.append(", certifiedModelCode=");
		sb.append(getCertifiedModelCode());
		sb.append(", productionCountry=");
		sb.append(getProductionCountry());
		sb.append(", safetytestReportNo=");
		sb.append(getSafetytestReportNo());
		sb.append(", safetytestReportDate=");
		sb.append(getSafetytestReportDate());
		sb.append(", emissionTestReportNo=");
		sb.append(getEmissionTestReportNo());
		sb.append(", emissionTestReportDate=");
		sb.append(getEmissionTestReportDate());
		sb.append(", commonSafetyStandard=");
		sb.append(getCommonSafetyStandard());
		sb.append(", commonSafetyDescription=");
		sb.append(getCommonSafetyDescription());
		sb.append(", emissionStandard=");
		sb.append(getEmissionStandard());
		sb.append(", emissionDescription=");
		sb.append(getEmissionDescription());
		sb.append(", othertestReportNo=");
		sb.append(getOthertestReportNo());
		sb.append(", othertestReportDate=");
		sb.append(getOthertestReportDate());
		sb.append(", copReportNo=");
		sb.append(getCopReportNo());
		sb.append(", copReportDate=");
		sb.append(getCopReportDate());
		sb.append(", copReportExpireDate=");
		sb.append(getCopReportExpireDate());
		sb.append(", validRequestNo=");
		sb.append(getValidRequestNo());
		sb.append(", validRequestDate=");
		sb.append(getValidRequestDate());
		sb.append(", validInspectionRecordNo=");
		sb.append(getValidInspectionRecordNo());
		sb.append(", validInspectionRecordDate=");
		sb.append(getValidInspectionRecordDate());
		sb.append(", validCorporationId=");
		sb.append(getValidCorporationId());
		sb.append(", validInspectorId=");
		sb.append(getValidInspectorId());
		sb.append(", validInspectorName=");
		sb.append(getValidInspectorName());
		sb.append(", validRemarks=");
		sb.append(getValidRemarks());
		sb.append(", validInspectionNote=");
		sb.append(getValidInspectionNote());
		sb.append(", deliverableFileEntryId=");
		sb.append(getDeliverableFileEntryId());
		sb.append(", documentFileEntryId=");
		sb.append(getDocumentFileEntryId());
		sb.append(", modifyDate=");
		sb.append(getModifyDate());
		sb.append(", syncDate=");
		sb.append(getSyncDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(154);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.VRExpireCertificate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mtCore</column-name><column-value><![CDATA[");
		sb.append(getMtCore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>convertAssembleId</column-name><column-value><![CDATA[");
		sb.append(getConvertAssembleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validDossierId</column-name><column-value><![CDATA[");
		sb.append(getValidDossierId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validDossierIdCTN</column-name><column-value><![CDATA[");
		sb.append(getValidDossierIdCTN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validDossierNo</column-name><column-value><![CDATA[");
		sb.append(getValidDossierNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleTypeCertificateId</column-name><column-value><![CDATA[");
		sb.append(getVehicleTypeCertificateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierId</column-name><column-value><![CDATA[");
		sb.append(getDossierId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierIdCTN</column-name><column-value><![CDATA[");
		sb.append(getDossierIdCTN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierNo</column-name><column-value><![CDATA[");
		sb.append(getDossierNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierStatus</column-name><column-value><![CDATA[");
		sb.append(getDossierStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>previousExpireDate</column-name><column-value><![CDATA[");
		sb.append(getPreviousExpireDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateRecordNo</column-name><column-value><![CDATA[");
		sb.append(getCertificateRecordNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateRecordDate</column-name><column-value><![CDATA[");
		sb.append(getCertificateRecordDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateRecordExpireDate</column-name><column-value><![CDATA[");
		sb.append(getCertificateRecordExpireDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expiredStatus</column-name><column-value><![CDATA[");
		sb.append(getExpiredStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleClass</column-name><column-value><![CDATA[");
		sb.append(getVehicleClass());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedVehicleType</column-name><column-value><![CDATA[");
		sb.append(getCertifiedVehicleType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedVehicleTypeDescription</column-name><column-value><![CDATA[");
		sb.append(getCertifiedVehicleTypeDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedTrademark</column-name><column-value><![CDATA[");
		sb.append(getCertifiedTrademark());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedTrademarkName</column-name><column-value><![CDATA[");
		sb.append(getCertifiedTrademarkName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedCommercialName</column-name><column-value><![CDATA[");
		sb.append(getCertifiedCommercialName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedModelCode</column-name><column-value><![CDATA[");
		sb.append(getCertifiedModelCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionCountry</column-name><column-value><![CDATA[");
		sb.append(getProductionCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>safetytestReportNo</column-name><column-value><![CDATA[");
		sb.append(getSafetytestReportNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>safetytestReportDate</column-name><column-value><![CDATA[");
		sb.append(getSafetytestReportDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emissionTestReportNo</column-name><column-value><![CDATA[");
		sb.append(getEmissionTestReportNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emissionTestReportDate</column-name><column-value><![CDATA[");
		sb.append(getEmissionTestReportDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commonSafetyStandard</column-name><column-value><![CDATA[");
		sb.append(getCommonSafetyStandard());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commonSafetyDescription</column-name><column-value><![CDATA[");
		sb.append(getCommonSafetyDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emissionStandard</column-name><column-value><![CDATA[");
		sb.append(getEmissionStandard());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emissionDescription</column-name><column-value><![CDATA[");
		sb.append(getEmissionDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>othertestReportNo</column-name><column-value><![CDATA[");
		sb.append(getOthertestReportNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>othertestReportDate</column-name><column-value><![CDATA[");
		sb.append(getOthertestReportDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportNo</column-name><column-value><![CDATA[");
		sb.append(getCopReportNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportDate</column-name><column-value><![CDATA[");
		sb.append(getCopReportDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportExpireDate</column-name><column-value><![CDATA[");
		sb.append(getCopReportExpireDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validRequestNo</column-name><column-value><![CDATA[");
		sb.append(getValidRequestNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validRequestDate</column-name><column-value><![CDATA[");
		sb.append(getValidRequestDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validInspectionRecordNo</column-name><column-value><![CDATA[");
		sb.append(getValidInspectionRecordNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validInspectionRecordDate</column-name><column-value><![CDATA[");
		sb.append(getValidInspectionRecordDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validCorporationId</column-name><column-value><![CDATA[");
		sb.append(getValidCorporationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validInspectorId</column-name><column-value><![CDATA[");
		sb.append(getValidInspectorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validInspectorName</column-name><column-value><![CDATA[");
		sb.append(getValidInspectorName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validRemarks</column-name><column-value><![CDATA[");
		sb.append(getValidRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validInspectionNote</column-name><column-value><![CDATA[");
		sb.append(getValidInspectionNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deliverableFileEntryId</column-name><column-value><![CDATA[");
		sb.append(getDeliverableFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentFileEntryId</column-name><column-value><![CDATA[");
		sb.append(getDocumentFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifyDate</column-name><column-value><![CDATA[");
		sb.append(getModifyDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncDate</column-name><column-value><![CDATA[");
		sb.append(getSyncDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VRExpireCertificate.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VRExpireCertificate.class
		};
	private long _id;
	private long _mtCore;
	private long _convertAssembleId;
	private long _validDossierId;
	private String _validDossierIdCTN;
	private String _validDossierNo;
	private long _vehicleTypeCertificateId;
	private long _originalVehicleTypeCertificateId;
	private boolean _setOriginalVehicleTypeCertificateId;
	private long _dossierId;
	private long _originalDossierId;
	private boolean _setOriginalDossierId;
	private String _dossierIdCTN;
	private String _dossierNo;
	private String _dossierStatus;
	private String _originalDossierStatus;
	private Date _previousExpireDate;
	private String _certificateRecordNo;
	private Date _certificateRecordDate;
	private Date _certificateRecordExpireDate;
	private int _expiredStatus;
	private String _vehicleClass;
	private String _certifiedVehicleType;
	private String _certifiedVehicleTypeDescription;
	private String _certifiedTrademark;
	private String _certifiedTrademarkName;
	private String _certifiedCommercialName;
	private String _certifiedModelCode;
	private String _productionCountry;
	private String _safetytestReportNo;
	private Date _safetytestReportDate;
	private String _emissionTestReportNo;
	private Date _emissionTestReportDate;
	private String _commonSafetyStandard;
	private String _commonSafetyDescription;
	private String _emissionStandard;
	private String _emissionDescription;
	private String _othertestReportNo;
	private Date _othertestReportDate;
	private String _copReportNo;
	private Date _copReportDate;
	private Date _copReportExpireDate;
	private String _validRequestNo;
	private Date _validRequestDate;
	private String _validInspectionRecordNo;
	private Date _validInspectionRecordDate;
	private long _validCorporationId;
	private long _validInspectorId;
	private String _validInspectorName;
	private String _validRemarks;
	private String _validInspectionNote;
	private long _deliverableFileEntryId;
	private long _documentFileEntryId;
	private Date _modifyDate;
	private Date _syncDate;
	private long _columnBitmask;
	private VRExpireCertificate _escapedModel;
}