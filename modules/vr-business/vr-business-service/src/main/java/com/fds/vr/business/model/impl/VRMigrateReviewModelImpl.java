/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.VRMigrateReview;
import com.fds.vr.business.model.VRMigrateReviewModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VRMigrateReview service. Represents a row in the &quot;vr_migrate_review&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VRMigrateReviewModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VRMigrateReviewImpl}.
 * </p>
 *
 * @author LamTV
 * @see VRMigrateReviewImpl
 * @see VRMigrateReview
 * @see VRMigrateReviewModel
 * @generated
 */
@ProviderType
public class VRMigrateReviewModelImpl extends BaseModelImpl<VRMigrateReview>
	implements VRMigrateReviewModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vr migrate review model instance should use the {@link VRMigrateReview} interface instead.
	 */
	public static final String TABLE_NAME = "vr_migrate_review";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "dataGroupID", Types.INTEGER },
			{ "migrateTableName", Types.VARCHAR },
			{ "migrationConfiguration", Types.VARCHAR },
			{ "sequenceNo", Types.INTEGER },
			{ "taskMigrationID", Types.INTEGER },
			{ "migrateRows", Types.VARCHAR },
			{ "migrateRemarks", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataGroupID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("migrateTableName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("migrationConfiguration", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sequenceNo", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("taskMigrationID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("migrateRows", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("migrateRemarks", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table vr_migrate_review (id LONG not null primary key,dataGroupID INTEGER,migrateTableName VARCHAR(75) null,migrationConfiguration VARCHAR(75) null,sequenceNo INTEGER,taskMigrationID INTEGER,migrateRows VARCHAR(75) null,migrateRemarks VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table vr_migrate_review";
	public static final String ORDER_BY_JPQL = " ORDER BY vrMigrateReview.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_migrate_review.id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.VRMigrateReview"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.VRMigrateReview"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.business.model.VRMigrateReview"),
			true);
	public static final long TASKMIGRATIONID_COLUMN_BITMASK = 1L;
	public static final long ID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.VRMigrateReview"));

	public VRMigrateReviewModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VRMigrateReview.class;
	}

	@Override
	public String getModelClassName() {
		return VRMigrateReview.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("dataGroupID", getDataGroupID());
		attributes.put("migrateTableName", getMigrateTableName());
		attributes.put("migrationConfiguration", getMigrationConfiguration());
		attributes.put("sequenceNo", getSequenceNo());
		attributes.put("taskMigrationID", getTaskMigrationID());
		attributes.put("migrateRows", getMigrateRows());
		attributes.put("migrateRemarks", getMigrateRemarks());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Integer dataGroupID = (Integer)attributes.get("dataGroupID");

		if (dataGroupID != null) {
			setDataGroupID(dataGroupID);
		}

		String migrateTableName = (String)attributes.get("migrateTableName");

		if (migrateTableName != null) {
			setMigrateTableName(migrateTableName);
		}

		String migrationConfiguration = (String)attributes.get(
				"migrationConfiguration");

		if (migrationConfiguration != null) {
			setMigrationConfiguration(migrationConfiguration);
		}

		Integer sequenceNo = (Integer)attributes.get("sequenceNo");

		if (sequenceNo != null) {
			setSequenceNo(sequenceNo);
		}

		Integer taskMigrationID = (Integer)attributes.get("taskMigrationID");

		if (taskMigrationID != null) {
			setTaskMigrationID(taskMigrationID);
		}

		String migrateRows = (String)attributes.get("migrateRows");

		if (migrateRows != null) {
			setMigrateRows(migrateRows);
		}

		String migrateRemarks = (String)attributes.get("migrateRemarks");

		if (migrateRemarks != null) {
			setMigrateRemarks(migrateRemarks);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public int getDataGroupID() {
		return _dataGroupID;
	}

	@Override
	public void setDataGroupID(int dataGroupID) {
		_dataGroupID = dataGroupID;
	}

	@Override
	public String getMigrateTableName() {
		if (_migrateTableName == null) {
			return StringPool.BLANK;
		}
		else {
			return _migrateTableName;
		}
	}

	@Override
	public void setMigrateTableName(String migrateTableName) {
		_migrateTableName = migrateTableName;
	}

	@Override
	public String getMigrationConfiguration() {
		if (_migrationConfiguration == null) {
			return StringPool.BLANK;
		}
		else {
			return _migrationConfiguration;
		}
	}

	@Override
	public void setMigrationConfiguration(String migrationConfiguration) {
		_migrationConfiguration = migrationConfiguration;
	}

	@Override
	public int getSequenceNo() {
		return _sequenceNo;
	}

	@Override
	public void setSequenceNo(int sequenceNo) {
		_sequenceNo = sequenceNo;
	}

	@Override
	public int getTaskMigrationID() {
		return _taskMigrationID;
	}

	@Override
	public void setTaskMigrationID(int taskMigrationID) {
		_columnBitmask |= TASKMIGRATIONID_COLUMN_BITMASK;

		if (!_setOriginalTaskMigrationID) {
			_setOriginalTaskMigrationID = true;

			_originalTaskMigrationID = _taskMigrationID;
		}

		_taskMigrationID = taskMigrationID;
	}

	public int getOriginalTaskMigrationID() {
		return _originalTaskMigrationID;
	}

	@Override
	public String getMigrateRows() {
		if (_migrateRows == null) {
			return StringPool.BLANK;
		}
		else {
			return _migrateRows;
		}
	}

	@Override
	public void setMigrateRows(String migrateRows) {
		_migrateRows = migrateRows;
	}

	@Override
	public String getMigrateRemarks() {
		if (_migrateRemarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _migrateRemarks;
		}
	}

	@Override
	public void setMigrateRemarks(String migrateRemarks) {
		_migrateRemarks = migrateRemarks;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VRMigrateReview.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VRMigrateReview toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VRMigrateReview)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VRMigrateReviewImpl vrMigrateReviewImpl = new VRMigrateReviewImpl();

		vrMigrateReviewImpl.setId(getId());
		vrMigrateReviewImpl.setDataGroupID(getDataGroupID());
		vrMigrateReviewImpl.setMigrateTableName(getMigrateTableName());
		vrMigrateReviewImpl.setMigrationConfiguration(getMigrationConfiguration());
		vrMigrateReviewImpl.setSequenceNo(getSequenceNo());
		vrMigrateReviewImpl.setTaskMigrationID(getTaskMigrationID());
		vrMigrateReviewImpl.setMigrateRows(getMigrateRows());
		vrMigrateReviewImpl.setMigrateRemarks(getMigrateRemarks());

		vrMigrateReviewImpl.resetOriginalValues();

		return vrMigrateReviewImpl;
	}

	@Override
	public int compareTo(VRMigrateReview vrMigrateReview) {
		long primaryKey = vrMigrateReview.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VRMigrateReview)) {
			return false;
		}

		VRMigrateReview vrMigrateReview = (VRMigrateReview)obj;

		long primaryKey = vrMigrateReview.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VRMigrateReviewModelImpl vrMigrateReviewModelImpl = this;

		vrMigrateReviewModelImpl._originalTaskMigrationID = vrMigrateReviewModelImpl._taskMigrationID;

		vrMigrateReviewModelImpl._setOriginalTaskMigrationID = false;

		vrMigrateReviewModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VRMigrateReview> toCacheModel() {
		VRMigrateReviewCacheModel vrMigrateReviewCacheModel = new VRMigrateReviewCacheModel();

		vrMigrateReviewCacheModel.id = getId();

		vrMigrateReviewCacheModel.dataGroupID = getDataGroupID();

		vrMigrateReviewCacheModel.migrateTableName = getMigrateTableName();

		String migrateTableName = vrMigrateReviewCacheModel.migrateTableName;

		if ((migrateTableName != null) && (migrateTableName.length() == 0)) {
			vrMigrateReviewCacheModel.migrateTableName = null;
		}

		vrMigrateReviewCacheModel.migrationConfiguration = getMigrationConfiguration();

		String migrationConfiguration = vrMigrateReviewCacheModel.migrationConfiguration;

		if ((migrationConfiguration != null) &&
				(migrationConfiguration.length() == 0)) {
			vrMigrateReviewCacheModel.migrationConfiguration = null;
		}

		vrMigrateReviewCacheModel.sequenceNo = getSequenceNo();

		vrMigrateReviewCacheModel.taskMigrationID = getTaskMigrationID();

		vrMigrateReviewCacheModel.migrateRows = getMigrateRows();

		String migrateRows = vrMigrateReviewCacheModel.migrateRows;

		if ((migrateRows != null) && (migrateRows.length() == 0)) {
			vrMigrateReviewCacheModel.migrateRows = null;
		}

		vrMigrateReviewCacheModel.migrateRemarks = getMigrateRemarks();

		String migrateRemarks = vrMigrateReviewCacheModel.migrateRemarks;

		if ((migrateRemarks != null) && (migrateRemarks.length() == 0)) {
			vrMigrateReviewCacheModel.migrateRemarks = null;
		}

		return vrMigrateReviewCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", dataGroupID=");
		sb.append(getDataGroupID());
		sb.append(", migrateTableName=");
		sb.append(getMigrateTableName());
		sb.append(", migrationConfiguration=");
		sb.append(getMigrationConfiguration());
		sb.append(", sequenceNo=");
		sb.append(getSequenceNo());
		sb.append(", taskMigrationID=");
		sb.append(getTaskMigrationID());
		sb.append(", migrateRows=");
		sb.append(getMigrateRows());
		sb.append(", migrateRemarks=");
		sb.append(getMigrateRemarks());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.VRMigrateReview");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dataGroupID</column-name><column-value><![CDATA[");
		sb.append(getDataGroupID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>migrateTableName</column-name><column-value><![CDATA[");
		sb.append(getMigrateTableName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>migrationConfiguration</column-name><column-value><![CDATA[");
		sb.append(getMigrationConfiguration());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sequenceNo</column-name><column-value><![CDATA[");
		sb.append(getSequenceNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taskMigrationID</column-name><column-value><![CDATA[");
		sb.append(getTaskMigrationID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>migrateRows</column-name><column-value><![CDATA[");
		sb.append(getMigrateRows());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>migrateRemarks</column-name><column-value><![CDATA[");
		sb.append(getMigrateRemarks());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VRMigrateReview.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VRMigrateReview.class
		};
	private long _id;
	private int _dataGroupID;
	private String _migrateTableName;
	private String _migrationConfiguration;
	private int _sequenceNo;
	private int _taskMigrationID;
	private int _originalTaskMigrationID;
	private boolean _setOriginalTaskMigrationID;
	private String _migrateRows;
	private String _migrateRemarks;
	private long _columnBitmask;
	private VRMigrateReview _escapedModel;
}