/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.VRMigrateMappings;
import com.fds.vr.business.model.VRMigrateMappingsModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VRMigrateMappings service. Represents a row in the &quot;vr_migrate_mappings&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VRMigrateMappingsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VRMigrateMappingsImpl}.
 * </p>
 *
 * @author LamTV
 * @see VRMigrateMappingsImpl
 * @see VRMigrateMappings
 * @see VRMigrateMappingsModel
 * @generated
 */
@ProviderType
public class VRMigrateMappingsModelImpl extends BaseModelImpl<VRMigrateMappings>
	implements VRMigrateMappingsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vr migrate mappings model instance should use the {@link VRMigrateMappings} interface instead.
	 */
	public static final String TABLE_NAME = "vr_migrate_mappings";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "dataGroupID", Types.INTEGER },
			{ "sequenceNo", Types.INTEGER },
			{ "migrateTableName", Types.VARCHAR },
			{ "dataItemID", Types.INTEGER },
			{ "itemCode", Types.VARCHAR },
			{ "itemName", Types.VARCHAR },
			{ "itemShortName", Types.VARCHAR },
			{ "itemDescription", Types.VARCHAR },
			{ "code_0", Types.VARCHAR },
			{ "code_1", Types.VARCHAR },
			{ "code_2", Types.VARCHAR },
			{ "code_3", Types.VARCHAR },
			{ "level", Types.INTEGER },
			{ "seqNo", Types.INTEGER },
			{ "markedAsRestore", Types.INTEGER },
			{ "markedAsDelete", Types.INTEGER },
			{ "alterCollectionCode", Types.VARCHAR },
			{ "alterItemCode", Types.VARCHAR },
			{ "alterItemName", Types.VARCHAR },
			{ "alterGroupCode", Types.VARCHAR },
			{ "alterLevel", Types.VARCHAR },
			{ "taskMigrationID", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataGroupID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("sequenceNo", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("migrateTableName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dataItemID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("itemCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("itemName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("itemShortName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("itemDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("code_0", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("code_1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("code_2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("code_3", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("level", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("seqNo", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("markedAsRestore", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("markedAsDelete", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("alterCollectionCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("alterItemCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("alterItemName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("alterGroupCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("alterLevel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("taskMigrationID", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table vr_migrate_mappings (id LONG not null primary key,dataGroupID INTEGER,sequenceNo INTEGER,migrateTableName VARCHAR(75) null,dataItemID INTEGER,itemCode VARCHAR(75) null,itemName VARCHAR(75) null,itemShortName VARCHAR(75) null,itemDescription VARCHAR(75) null,code_0 VARCHAR(75) null,code_1 VARCHAR(75) null,code_2 VARCHAR(75) null,code_3 VARCHAR(75) null,level INTEGER,seqNo INTEGER,markedAsRestore INTEGER,markedAsDelete INTEGER,alterCollectionCode VARCHAR(75) null,alterItemCode VARCHAR(75) null,alterItemName VARCHAR(75) null,alterGroupCode VARCHAR(75) null,alterLevel VARCHAR(75) null,taskMigrationID INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table vr_migrate_mappings";
	public static final String ORDER_BY_JPQL = " ORDER BY vrMigrateMappings.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_migrate_mappings.id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.VRMigrateMappings"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.VRMigrateMappings"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.business.model.VRMigrateMappings"),
			true);
	public static final long DATAGROUPID_COLUMN_BITMASK = 1L;
	public static final long SEQUENCENO_COLUMN_BITMASK = 2L;
	public static final long TASKMIGRATIONID_COLUMN_BITMASK = 4L;
	public static final long ID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.VRMigrateMappings"));

	public VRMigrateMappingsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VRMigrateMappings.class;
	}

	@Override
	public String getModelClassName() {
		return VRMigrateMappings.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("dataGroupId", getDataGroupId());
		attributes.put("sequenceNo", getSequenceNo());
		attributes.put("migrateTableName", getMigrateTableName());
		attributes.put("dataItemID", getDataItemID());
		attributes.put("itemCode", getItemCode());
		attributes.put("itemName", getItemName());
		attributes.put("itemShortName", getItemShortName());
		attributes.put("itemDescription", getItemDescription());
		attributes.put("code_0", getCode_0());
		attributes.put("code_1", getCode_1());
		attributes.put("code_2", getCode_2());
		attributes.put("code_3", getCode_3());
		attributes.put("level", getLevel());
		attributes.put("seqNo", getSeqNo());
		attributes.put("markedAsRestore", getMarkedAsRestore());
		attributes.put("markedAsDelete", getMarkedAsDelete());
		attributes.put("alterCollectionCode", getAlterCollectionCode());
		attributes.put("alterItemCode", getAlterItemCode());
		attributes.put("alterItemName", getAlterItemName());
		attributes.put("alterGroupCode", getAlterGroupCode());
		attributes.put("alterLevel", getAlterLevel());
		attributes.put("taskMigrationID", getTaskMigrationID());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Integer dataGroupId = (Integer)attributes.get("dataGroupId");

		if (dataGroupId != null) {
			setDataGroupId(dataGroupId);
		}

		Integer sequenceNo = (Integer)attributes.get("sequenceNo");

		if (sequenceNo != null) {
			setSequenceNo(sequenceNo);
		}

		String migrateTableName = (String)attributes.get("migrateTableName");

		if (migrateTableName != null) {
			setMigrateTableName(migrateTableName);
		}

		Integer dataItemID = (Integer)attributes.get("dataItemID");

		if (dataItemID != null) {
			setDataItemID(dataItemID);
		}

		String itemCode = (String)attributes.get("itemCode");

		if (itemCode != null) {
			setItemCode(itemCode);
		}

		String itemName = (String)attributes.get("itemName");

		if (itemName != null) {
			setItemName(itemName);
		}

		String itemShortName = (String)attributes.get("itemShortName");

		if (itemShortName != null) {
			setItemShortName(itemShortName);
		}

		String itemDescription = (String)attributes.get("itemDescription");

		if (itemDescription != null) {
			setItemDescription(itemDescription);
		}

		String code_0 = (String)attributes.get("code_0");

		if (code_0 != null) {
			setCode_0(code_0);
		}

		String code_1 = (String)attributes.get("code_1");

		if (code_1 != null) {
			setCode_1(code_1);
		}

		String code_2 = (String)attributes.get("code_2");

		if (code_2 != null) {
			setCode_2(code_2);
		}

		String code_3 = (String)attributes.get("code_3");

		if (code_3 != null) {
			setCode_3(code_3);
		}

		Integer level = (Integer)attributes.get("level");

		if (level != null) {
			setLevel(level);
		}

		Integer seqNo = (Integer)attributes.get("seqNo");

		if (seqNo != null) {
			setSeqNo(seqNo);
		}

		Integer markedAsRestore = (Integer)attributes.get("markedAsRestore");

		if (markedAsRestore != null) {
			setMarkedAsRestore(markedAsRestore);
		}

		Integer markedAsDelete = (Integer)attributes.get("markedAsDelete");

		if (markedAsDelete != null) {
			setMarkedAsDelete(markedAsDelete);
		}

		String alterCollectionCode = (String)attributes.get(
				"alterCollectionCode");

		if (alterCollectionCode != null) {
			setAlterCollectionCode(alterCollectionCode);
		}

		String alterItemCode = (String)attributes.get("alterItemCode");

		if (alterItemCode != null) {
			setAlterItemCode(alterItemCode);
		}

		String alterItemName = (String)attributes.get("alterItemName");

		if (alterItemName != null) {
			setAlterItemName(alterItemName);
		}

		String alterGroupCode = (String)attributes.get("alterGroupCode");

		if (alterGroupCode != null) {
			setAlterGroupCode(alterGroupCode);
		}

		String alterLevel = (String)attributes.get("alterLevel");

		if (alterLevel != null) {
			setAlterLevel(alterLevel);
		}

		Integer taskMigrationID = (Integer)attributes.get("taskMigrationID");

		if (taskMigrationID != null) {
			setTaskMigrationID(taskMigrationID);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public int getDataGroupId() {
		return _dataGroupId;
	}

	@Override
	public void setDataGroupId(int dataGroupId) {
		_columnBitmask |= DATAGROUPID_COLUMN_BITMASK;

		if (!_setOriginalDataGroupId) {
			_setOriginalDataGroupId = true;

			_originalDataGroupId = _dataGroupId;
		}

		_dataGroupId = dataGroupId;
	}

	public int getOriginalDataGroupId() {
		return _originalDataGroupId;
	}

	@Override
	public int getSequenceNo() {
		return _sequenceNo;
	}

	@Override
	public void setSequenceNo(int sequenceNo) {
		_columnBitmask |= SEQUENCENO_COLUMN_BITMASK;

		if (!_setOriginalSequenceNo) {
			_setOriginalSequenceNo = true;

			_originalSequenceNo = _sequenceNo;
		}

		_sequenceNo = sequenceNo;
	}

	public int getOriginalSequenceNo() {
		return _originalSequenceNo;
	}

	@Override
	public String getMigrateTableName() {
		if (_migrateTableName == null) {
			return StringPool.BLANK;
		}
		else {
			return _migrateTableName;
		}
	}

	@Override
	public void setMigrateTableName(String migrateTableName) {
		_migrateTableName = migrateTableName;
	}

	@Override
	public int getDataItemID() {
		return _dataItemID;
	}

	@Override
	public void setDataItemID(int dataItemID) {
		_dataItemID = dataItemID;
	}

	@Override
	public String getItemCode() {
		if (_itemCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemCode;
		}
	}

	@Override
	public void setItemCode(String itemCode) {
		_itemCode = itemCode;
	}

	@Override
	public String getItemName() {
		if (_itemName == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemName;
		}
	}

	@Override
	public void setItemName(String itemName) {
		_itemName = itemName;
	}

	@Override
	public String getItemShortName() {
		if (_itemShortName == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemShortName;
		}
	}

	@Override
	public void setItemShortName(String itemShortName) {
		_itemShortName = itemShortName;
	}

	@Override
	public String getItemDescription() {
		if (_itemDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemDescription;
		}
	}

	@Override
	public void setItemDescription(String itemDescription) {
		_itemDescription = itemDescription;
	}

	@Override
	public String getCode_0() {
		if (_code_0 == null) {
			return StringPool.BLANK;
		}
		else {
			return _code_0;
		}
	}

	@Override
	public void setCode_0(String code_0) {
		_code_0 = code_0;
	}

	@Override
	public String getCode_1() {
		if (_code_1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _code_1;
		}
	}

	@Override
	public void setCode_1(String code_1) {
		_code_1 = code_1;
	}

	@Override
	public String getCode_2() {
		if (_code_2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _code_2;
		}
	}

	@Override
	public void setCode_2(String code_2) {
		_code_2 = code_2;
	}

	@Override
	public String getCode_3() {
		if (_code_3 == null) {
			return StringPool.BLANK;
		}
		else {
			return _code_3;
		}
	}

	@Override
	public void setCode_3(String code_3) {
		_code_3 = code_3;
	}

	@Override
	public int getLevel() {
		return _level;
	}

	@Override
	public void setLevel(int level) {
		_level = level;
	}

	@Override
	public int getSeqNo() {
		return _seqNo;
	}

	@Override
	public void setSeqNo(int seqNo) {
		_seqNo = seqNo;
	}

	@Override
	public int getMarkedAsRestore() {
		return _markedAsRestore;
	}

	@Override
	public void setMarkedAsRestore(int markedAsRestore) {
		_markedAsRestore = markedAsRestore;
	}

	@Override
	public int getMarkedAsDelete() {
		return _markedAsDelete;
	}

	@Override
	public void setMarkedAsDelete(int markedAsDelete) {
		_markedAsDelete = markedAsDelete;
	}

	@Override
	public String getAlterCollectionCode() {
		if (_alterCollectionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _alterCollectionCode;
		}
	}

	@Override
	public void setAlterCollectionCode(String alterCollectionCode) {
		_alterCollectionCode = alterCollectionCode;
	}

	@Override
	public String getAlterItemCode() {
		if (_alterItemCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _alterItemCode;
		}
	}

	@Override
	public void setAlterItemCode(String alterItemCode) {
		_alterItemCode = alterItemCode;
	}

	@Override
	public String getAlterItemName() {
		if (_alterItemName == null) {
			return StringPool.BLANK;
		}
		else {
			return _alterItemName;
		}
	}

	@Override
	public void setAlterItemName(String alterItemName) {
		_alterItemName = alterItemName;
	}

	@Override
	public String getAlterGroupCode() {
		if (_alterGroupCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _alterGroupCode;
		}
	}

	@Override
	public void setAlterGroupCode(String alterGroupCode) {
		_alterGroupCode = alterGroupCode;
	}

	@Override
	public String getAlterLevel() {
		if (_alterLevel == null) {
			return StringPool.BLANK;
		}
		else {
			return _alterLevel;
		}
	}

	@Override
	public void setAlterLevel(String alterLevel) {
		_alterLevel = alterLevel;
	}

	@Override
	public int getTaskMigrationID() {
		return _taskMigrationID;
	}

	@Override
	public void setTaskMigrationID(int taskMigrationID) {
		_columnBitmask |= TASKMIGRATIONID_COLUMN_BITMASK;

		if (!_setOriginalTaskMigrationID) {
			_setOriginalTaskMigrationID = true;

			_originalTaskMigrationID = _taskMigrationID;
		}

		_taskMigrationID = taskMigrationID;
	}

	public int getOriginalTaskMigrationID() {
		return _originalTaskMigrationID;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VRMigrateMappings.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VRMigrateMappings toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VRMigrateMappings)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VRMigrateMappingsImpl vrMigrateMappingsImpl = new VRMigrateMappingsImpl();

		vrMigrateMappingsImpl.setId(getId());
		vrMigrateMappingsImpl.setDataGroupId(getDataGroupId());
		vrMigrateMappingsImpl.setSequenceNo(getSequenceNo());
		vrMigrateMappingsImpl.setMigrateTableName(getMigrateTableName());
		vrMigrateMappingsImpl.setDataItemID(getDataItemID());
		vrMigrateMappingsImpl.setItemCode(getItemCode());
		vrMigrateMappingsImpl.setItemName(getItemName());
		vrMigrateMappingsImpl.setItemShortName(getItemShortName());
		vrMigrateMappingsImpl.setItemDescription(getItemDescription());
		vrMigrateMappingsImpl.setCode_0(getCode_0());
		vrMigrateMappingsImpl.setCode_1(getCode_1());
		vrMigrateMappingsImpl.setCode_2(getCode_2());
		vrMigrateMappingsImpl.setCode_3(getCode_3());
		vrMigrateMappingsImpl.setLevel(getLevel());
		vrMigrateMappingsImpl.setSeqNo(getSeqNo());
		vrMigrateMappingsImpl.setMarkedAsRestore(getMarkedAsRestore());
		vrMigrateMappingsImpl.setMarkedAsDelete(getMarkedAsDelete());
		vrMigrateMappingsImpl.setAlterCollectionCode(getAlterCollectionCode());
		vrMigrateMappingsImpl.setAlterItemCode(getAlterItemCode());
		vrMigrateMappingsImpl.setAlterItemName(getAlterItemName());
		vrMigrateMappingsImpl.setAlterGroupCode(getAlterGroupCode());
		vrMigrateMappingsImpl.setAlterLevel(getAlterLevel());
		vrMigrateMappingsImpl.setTaskMigrationID(getTaskMigrationID());

		vrMigrateMappingsImpl.resetOriginalValues();

		return vrMigrateMappingsImpl;
	}

	@Override
	public int compareTo(VRMigrateMappings vrMigrateMappings) {
		long primaryKey = vrMigrateMappings.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VRMigrateMappings)) {
			return false;
		}

		VRMigrateMappings vrMigrateMappings = (VRMigrateMappings)obj;

		long primaryKey = vrMigrateMappings.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VRMigrateMappingsModelImpl vrMigrateMappingsModelImpl = this;

		vrMigrateMappingsModelImpl._originalDataGroupId = vrMigrateMappingsModelImpl._dataGroupId;

		vrMigrateMappingsModelImpl._setOriginalDataGroupId = false;

		vrMigrateMappingsModelImpl._originalSequenceNo = vrMigrateMappingsModelImpl._sequenceNo;

		vrMigrateMappingsModelImpl._setOriginalSequenceNo = false;

		vrMigrateMappingsModelImpl._originalTaskMigrationID = vrMigrateMappingsModelImpl._taskMigrationID;

		vrMigrateMappingsModelImpl._setOriginalTaskMigrationID = false;

		vrMigrateMappingsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VRMigrateMappings> toCacheModel() {
		VRMigrateMappingsCacheModel vrMigrateMappingsCacheModel = new VRMigrateMappingsCacheModel();

		vrMigrateMappingsCacheModel.id = getId();

		vrMigrateMappingsCacheModel.dataGroupId = getDataGroupId();

		vrMigrateMappingsCacheModel.sequenceNo = getSequenceNo();

		vrMigrateMappingsCacheModel.migrateTableName = getMigrateTableName();

		String migrateTableName = vrMigrateMappingsCacheModel.migrateTableName;

		if ((migrateTableName != null) && (migrateTableName.length() == 0)) {
			vrMigrateMappingsCacheModel.migrateTableName = null;
		}

		vrMigrateMappingsCacheModel.dataItemID = getDataItemID();

		vrMigrateMappingsCacheModel.itemCode = getItemCode();

		String itemCode = vrMigrateMappingsCacheModel.itemCode;

		if ((itemCode != null) && (itemCode.length() == 0)) {
			vrMigrateMappingsCacheModel.itemCode = null;
		}

		vrMigrateMappingsCacheModel.itemName = getItemName();

		String itemName = vrMigrateMappingsCacheModel.itemName;

		if ((itemName != null) && (itemName.length() == 0)) {
			vrMigrateMappingsCacheModel.itemName = null;
		}

		vrMigrateMappingsCacheModel.itemShortName = getItemShortName();

		String itemShortName = vrMigrateMappingsCacheModel.itemShortName;

		if ((itemShortName != null) && (itemShortName.length() == 0)) {
			vrMigrateMappingsCacheModel.itemShortName = null;
		}

		vrMigrateMappingsCacheModel.itemDescription = getItemDescription();

		String itemDescription = vrMigrateMappingsCacheModel.itemDescription;

		if ((itemDescription != null) && (itemDescription.length() == 0)) {
			vrMigrateMappingsCacheModel.itemDescription = null;
		}

		vrMigrateMappingsCacheModel.code_0 = getCode_0();

		String code_0 = vrMigrateMappingsCacheModel.code_0;

		if ((code_0 != null) && (code_0.length() == 0)) {
			vrMigrateMappingsCacheModel.code_0 = null;
		}

		vrMigrateMappingsCacheModel.code_1 = getCode_1();

		String code_1 = vrMigrateMappingsCacheModel.code_1;

		if ((code_1 != null) && (code_1.length() == 0)) {
			vrMigrateMappingsCacheModel.code_1 = null;
		}

		vrMigrateMappingsCacheModel.code_2 = getCode_2();

		String code_2 = vrMigrateMappingsCacheModel.code_2;

		if ((code_2 != null) && (code_2.length() == 0)) {
			vrMigrateMappingsCacheModel.code_2 = null;
		}

		vrMigrateMappingsCacheModel.code_3 = getCode_3();

		String code_3 = vrMigrateMappingsCacheModel.code_3;

		if ((code_3 != null) && (code_3.length() == 0)) {
			vrMigrateMappingsCacheModel.code_3 = null;
		}

		vrMigrateMappingsCacheModel.level = getLevel();

		vrMigrateMappingsCacheModel.seqNo = getSeqNo();

		vrMigrateMappingsCacheModel.markedAsRestore = getMarkedAsRestore();

		vrMigrateMappingsCacheModel.markedAsDelete = getMarkedAsDelete();

		vrMigrateMappingsCacheModel.alterCollectionCode = getAlterCollectionCode();

		String alterCollectionCode = vrMigrateMappingsCacheModel.alterCollectionCode;

		if ((alterCollectionCode != null) &&
				(alterCollectionCode.length() == 0)) {
			vrMigrateMappingsCacheModel.alterCollectionCode = null;
		}

		vrMigrateMappingsCacheModel.alterItemCode = getAlterItemCode();

		String alterItemCode = vrMigrateMappingsCacheModel.alterItemCode;

		if ((alterItemCode != null) && (alterItemCode.length() == 0)) {
			vrMigrateMappingsCacheModel.alterItemCode = null;
		}

		vrMigrateMappingsCacheModel.alterItemName = getAlterItemName();

		String alterItemName = vrMigrateMappingsCacheModel.alterItemName;

		if ((alterItemName != null) && (alterItemName.length() == 0)) {
			vrMigrateMappingsCacheModel.alterItemName = null;
		}

		vrMigrateMappingsCacheModel.alterGroupCode = getAlterGroupCode();

		String alterGroupCode = vrMigrateMappingsCacheModel.alterGroupCode;

		if ((alterGroupCode != null) && (alterGroupCode.length() == 0)) {
			vrMigrateMappingsCacheModel.alterGroupCode = null;
		}

		vrMigrateMappingsCacheModel.alterLevel = getAlterLevel();

		String alterLevel = vrMigrateMappingsCacheModel.alterLevel;

		if ((alterLevel != null) && (alterLevel.length() == 0)) {
			vrMigrateMappingsCacheModel.alterLevel = null;
		}

		vrMigrateMappingsCacheModel.taskMigrationID = getTaskMigrationID();

		return vrMigrateMappingsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(47);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", dataGroupId=");
		sb.append(getDataGroupId());
		sb.append(", sequenceNo=");
		sb.append(getSequenceNo());
		sb.append(", migrateTableName=");
		sb.append(getMigrateTableName());
		sb.append(", dataItemID=");
		sb.append(getDataItemID());
		sb.append(", itemCode=");
		sb.append(getItemCode());
		sb.append(", itemName=");
		sb.append(getItemName());
		sb.append(", itemShortName=");
		sb.append(getItemShortName());
		sb.append(", itemDescription=");
		sb.append(getItemDescription());
		sb.append(", code_0=");
		sb.append(getCode_0());
		sb.append(", code_1=");
		sb.append(getCode_1());
		sb.append(", code_2=");
		sb.append(getCode_2());
		sb.append(", code_3=");
		sb.append(getCode_3());
		sb.append(", level=");
		sb.append(getLevel());
		sb.append(", seqNo=");
		sb.append(getSeqNo());
		sb.append(", markedAsRestore=");
		sb.append(getMarkedAsRestore());
		sb.append(", markedAsDelete=");
		sb.append(getMarkedAsDelete());
		sb.append(", alterCollectionCode=");
		sb.append(getAlterCollectionCode());
		sb.append(", alterItemCode=");
		sb.append(getAlterItemCode());
		sb.append(", alterItemName=");
		sb.append(getAlterItemName());
		sb.append(", alterGroupCode=");
		sb.append(getAlterGroupCode());
		sb.append(", alterLevel=");
		sb.append(getAlterLevel());
		sb.append(", taskMigrationID=");
		sb.append(getTaskMigrationID());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(73);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.VRMigrateMappings");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dataGroupId</column-name><column-value><![CDATA[");
		sb.append(getDataGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sequenceNo</column-name><column-value><![CDATA[");
		sb.append(getSequenceNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>migrateTableName</column-name><column-value><![CDATA[");
		sb.append(getMigrateTableName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dataItemID</column-name><column-value><![CDATA[");
		sb.append(getDataItemID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemCode</column-name><column-value><![CDATA[");
		sb.append(getItemCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemName</column-name><column-value><![CDATA[");
		sb.append(getItemName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemShortName</column-name><column-value><![CDATA[");
		sb.append(getItemShortName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemDescription</column-name><column-value><![CDATA[");
		sb.append(getItemDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code_0</column-name><column-value><![CDATA[");
		sb.append(getCode_0());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code_1</column-name><column-value><![CDATA[");
		sb.append(getCode_1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code_2</column-name><column-value><![CDATA[");
		sb.append(getCode_2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code_3</column-name><column-value><![CDATA[");
		sb.append(getCode_3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>level</column-name><column-value><![CDATA[");
		sb.append(getLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>seqNo</column-name><column-value><![CDATA[");
		sb.append(getSeqNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markedAsRestore</column-name><column-value><![CDATA[");
		sb.append(getMarkedAsRestore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markedAsDelete</column-name><column-value><![CDATA[");
		sb.append(getMarkedAsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>alterCollectionCode</column-name><column-value><![CDATA[");
		sb.append(getAlterCollectionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>alterItemCode</column-name><column-value><![CDATA[");
		sb.append(getAlterItemCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>alterItemName</column-name><column-value><![CDATA[");
		sb.append(getAlterItemName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>alterGroupCode</column-name><column-value><![CDATA[");
		sb.append(getAlterGroupCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>alterLevel</column-name><column-value><![CDATA[");
		sb.append(getAlterLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taskMigrationID</column-name><column-value><![CDATA[");
		sb.append(getTaskMigrationID());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VRMigrateMappings.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VRMigrateMappings.class
		};
	private long _id;
	private int _dataGroupId;
	private int _originalDataGroupId;
	private boolean _setOriginalDataGroupId;
	private int _sequenceNo;
	private int _originalSequenceNo;
	private boolean _setOriginalSequenceNo;
	private String _migrateTableName;
	private int _dataItemID;
	private String _itemCode;
	private String _itemName;
	private String _itemShortName;
	private String _itemDescription;
	private String _code_0;
	private String _code_1;
	private String _code_2;
	private String _code_3;
	private int _level;
	private int _seqNo;
	private int _markedAsRestore;
	private int _markedAsDelete;
	private String _alterCollectionCode;
	private String _alterItemCode;
	private String _alterItemName;
	private String _alterGroupCode;
	private String _alterLevel;
	private int _taskMigrationID;
	private int _originalTaskMigrationID;
	private boolean _setOriginalTaskMigrationID;
	private long _columnBitmask;
	private VRMigrateMappings _escapedModel;
}