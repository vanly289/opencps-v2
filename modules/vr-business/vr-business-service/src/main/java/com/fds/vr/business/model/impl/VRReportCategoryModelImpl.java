/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.VRReportCategory;
import com.fds.vr.business.model.VRReportCategoryModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VRReportCategory service. Represents a row in the &quot;vr_report_category&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VRReportCategoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VRReportCategoryImpl}.
 * </p>
 *
 * @author LamTV
 * @see VRReportCategoryImpl
 * @see VRReportCategory
 * @see VRReportCategoryModel
 * @generated
 */
@ProviderType
public class VRReportCategoryModelImpl extends BaseModelImpl<VRReportCategory>
	implements VRReportCategoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vr report category model instance should use the {@link VRReportCategory} interface instead.
	 */
	public static final String TABLE_NAME = "vr_report_category";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.INTEGER },
			{ "rptCode", Types.VARCHAR },
			{ "rptName", Types.VARCHAR },
			{ "rptDescription", Types.VARCHAR },
			{ "rptGroup", Types.VARCHAR },
			{ "rptLevel", Types.INTEGER },
			{ "sequenceNo", Types.INTEGER },
			{ "jasperFileTemplate", Types.VARCHAR },
			{ "excelFileTemplate", Types.VARCHAR },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("rptCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rptName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rptDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rptGroup", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rptLevel", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("sequenceNo", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("jasperFileTemplate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("excelFileTemplate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table vr_report_category (id INTEGER not null primary key,rptCode VARCHAR(75) null,rptName VARCHAR(75) null,rptDescription VARCHAR(75) null,rptGroup VARCHAR(75) null,rptLevel INTEGER,sequenceNo INTEGER,jasperFileTemplate VARCHAR(75) null,excelFileTemplate VARCHAR(75) null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table vr_report_category";
	public static final String ORDER_BY_JPQL = " ORDER BY vrReportCategory.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_report_category.id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.VRReportCategory"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.VRReportCategory"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.business.model.VRReportCategory"),
			true);
	public static final long RPTCODE_COLUMN_BITMASK = 1L;
	public static final long RPTDESCRIPTION_COLUMN_BITMASK = 2L;
	public static final long RPTGROUP_COLUMN_BITMASK = 4L;
	public static final long RPTLEVEL_COLUMN_BITMASK = 8L;
	public static final long ID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.VRReportCategory"));

	public VRReportCategoryModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VRReportCategory.class;
	}

	@Override
	public String getModelClassName() {
		return VRReportCategory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("rptCode", getRptCode());
		attributes.put("rptName", getRptName());
		attributes.put("rptDescription", getRptDescription());
		attributes.put("rptGroup", getRptGroup());
		attributes.put("rptLevel", getRptLevel());
		attributes.put("sequenceNo", getSequenceNo());
		attributes.put("jasperFileTemplate", getJasperFileTemplate());
		attributes.put("excelFileTemplate", getExcelFileTemplate());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer id = (Integer)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String rptCode = (String)attributes.get("rptCode");

		if (rptCode != null) {
			setRptCode(rptCode);
		}

		String rptName = (String)attributes.get("rptName");

		if (rptName != null) {
			setRptName(rptName);
		}

		String rptDescription = (String)attributes.get("rptDescription");

		if (rptDescription != null) {
			setRptDescription(rptDescription);
		}

		String rptGroup = (String)attributes.get("rptGroup");

		if (rptGroup != null) {
			setRptGroup(rptGroup);
		}

		Integer rptLevel = (Integer)attributes.get("rptLevel");

		if (rptLevel != null) {
			setRptLevel(rptLevel);
		}

		Integer sequenceNo = (Integer)attributes.get("sequenceNo");

		if (sequenceNo != null) {
			setSequenceNo(sequenceNo);
		}

		String jasperFileTemplate = (String)attributes.get("jasperFileTemplate");

		if (jasperFileTemplate != null) {
			setJasperFileTemplate(jasperFileTemplate);
		}

		String excelFileTemplate = (String)attributes.get("excelFileTemplate");

		if (excelFileTemplate != null) {
			setExcelFileTemplate(excelFileTemplate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@Override
	public int getId() {
		return _id;
	}

	@Override
	public void setId(int id) {
		_id = id;
	}

	@Override
	public String getRptCode() {
		if (_rptCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _rptCode;
		}
	}

	@Override
	public void setRptCode(String rptCode) {
		_columnBitmask |= RPTCODE_COLUMN_BITMASK;

		if (_originalRptCode == null) {
			_originalRptCode = _rptCode;
		}

		_rptCode = rptCode;
	}

	public String getOriginalRptCode() {
		return GetterUtil.getString(_originalRptCode);
	}

	@Override
	public String getRptName() {
		if (_rptName == null) {
			return StringPool.BLANK;
		}
		else {
			return _rptName;
		}
	}

	@Override
	public void setRptName(String rptName) {
		_rptName = rptName;
	}

	@Override
	public String getRptDescription() {
		if (_rptDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _rptDescription;
		}
	}

	@Override
	public void setRptDescription(String rptDescription) {
		_columnBitmask |= RPTDESCRIPTION_COLUMN_BITMASK;

		if (_originalRptDescription == null) {
			_originalRptDescription = _rptDescription;
		}

		_rptDescription = rptDescription;
	}

	public String getOriginalRptDescription() {
		return GetterUtil.getString(_originalRptDescription);
	}

	@Override
	public String getRptGroup() {
		if (_rptGroup == null) {
			return StringPool.BLANK;
		}
		else {
			return _rptGroup;
		}
	}

	@Override
	public void setRptGroup(String rptGroup) {
		_columnBitmask |= RPTGROUP_COLUMN_BITMASK;

		if (_originalRptGroup == null) {
			_originalRptGroup = _rptGroup;
		}

		_rptGroup = rptGroup;
	}

	public String getOriginalRptGroup() {
		return GetterUtil.getString(_originalRptGroup);
	}

	@Override
	public int getRptLevel() {
		return _rptLevel;
	}

	@Override
	public void setRptLevel(int rptLevel) {
		_columnBitmask |= RPTLEVEL_COLUMN_BITMASK;

		if (!_setOriginalRptLevel) {
			_setOriginalRptLevel = true;

			_originalRptLevel = _rptLevel;
		}

		_rptLevel = rptLevel;
	}

	public int getOriginalRptLevel() {
		return _originalRptLevel;
	}

	@Override
	public int getSequenceNo() {
		return _sequenceNo;
	}

	@Override
	public void setSequenceNo(int sequenceNo) {
		_sequenceNo = sequenceNo;
	}

	@Override
	public String getJasperFileTemplate() {
		if (_jasperFileTemplate == null) {
			return StringPool.BLANK;
		}
		else {
			return _jasperFileTemplate;
		}
	}

	@Override
	public void setJasperFileTemplate(String jasperFileTemplate) {
		_jasperFileTemplate = jasperFileTemplate;
	}

	@Override
	public String getExcelFileTemplate() {
		if (_excelFileTemplate == null) {
			return StringPool.BLANK;
		}
		else {
			return _excelFileTemplate;
		}
	}

	@Override
	public void setExcelFileTemplate(String excelFileTemplate) {
		_excelFileTemplate = excelFileTemplate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public VRReportCategory toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VRReportCategory)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VRReportCategoryImpl vrReportCategoryImpl = new VRReportCategoryImpl();

		vrReportCategoryImpl.setId(getId());
		vrReportCategoryImpl.setRptCode(getRptCode());
		vrReportCategoryImpl.setRptName(getRptName());
		vrReportCategoryImpl.setRptDescription(getRptDescription());
		vrReportCategoryImpl.setRptGroup(getRptGroup());
		vrReportCategoryImpl.setRptLevel(getRptLevel());
		vrReportCategoryImpl.setSequenceNo(getSequenceNo());
		vrReportCategoryImpl.setJasperFileTemplate(getJasperFileTemplate());
		vrReportCategoryImpl.setExcelFileTemplate(getExcelFileTemplate());
		vrReportCategoryImpl.setModifiedDate(getModifiedDate());

		vrReportCategoryImpl.resetOriginalValues();

		return vrReportCategoryImpl;
	}

	@Override
	public int compareTo(VRReportCategory vrReportCategory) {
		int primaryKey = vrReportCategory.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VRReportCategory)) {
			return false;
		}

		VRReportCategory vrReportCategory = (VRReportCategory)obj;

		int primaryKey = vrReportCategory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VRReportCategoryModelImpl vrReportCategoryModelImpl = this;

		vrReportCategoryModelImpl._originalRptCode = vrReportCategoryModelImpl._rptCode;

		vrReportCategoryModelImpl._originalRptDescription = vrReportCategoryModelImpl._rptDescription;

		vrReportCategoryModelImpl._originalRptGroup = vrReportCategoryModelImpl._rptGroup;

		vrReportCategoryModelImpl._originalRptLevel = vrReportCategoryModelImpl._rptLevel;

		vrReportCategoryModelImpl._setOriginalRptLevel = false;

		vrReportCategoryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VRReportCategory> toCacheModel() {
		VRReportCategoryCacheModel vrReportCategoryCacheModel = new VRReportCategoryCacheModel();

		vrReportCategoryCacheModel.id = getId();

		vrReportCategoryCacheModel.rptCode = getRptCode();

		String rptCode = vrReportCategoryCacheModel.rptCode;

		if ((rptCode != null) && (rptCode.length() == 0)) {
			vrReportCategoryCacheModel.rptCode = null;
		}

		vrReportCategoryCacheModel.rptName = getRptName();

		String rptName = vrReportCategoryCacheModel.rptName;

		if ((rptName != null) && (rptName.length() == 0)) {
			vrReportCategoryCacheModel.rptName = null;
		}

		vrReportCategoryCacheModel.rptDescription = getRptDescription();

		String rptDescription = vrReportCategoryCacheModel.rptDescription;

		if ((rptDescription != null) && (rptDescription.length() == 0)) {
			vrReportCategoryCacheModel.rptDescription = null;
		}

		vrReportCategoryCacheModel.rptGroup = getRptGroup();

		String rptGroup = vrReportCategoryCacheModel.rptGroup;

		if ((rptGroup != null) && (rptGroup.length() == 0)) {
			vrReportCategoryCacheModel.rptGroup = null;
		}

		vrReportCategoryCacheModel.rptLevel = getRptLevel();

		vrReportCategoryCacheModel.sequenceNo = getSequenceNo();

		vrReportCategoryCacheModel.jasperFileTemplate = getJasperFileTemplate();

		String jasperFileTemplate = vrReportCategoryCacheModel.jasperFileTemplate;

		if ((jasperFileTemplate != null) && (jasperFileTemplate.length() == 0)) {
			vrReportCategoryCacheModel.jasperFileTemplate = null;
		}

		vrReportCategoryCacheModel.excelFileTemplate = getExcelFileTemplate();

		String excelFileTemplate = vrReportCategoryCacheModel.excelFileTemplate;

		if ((excelFileTemplate != null) && (excelFileTemplate.length() == 0)) {
			vrReportCategoryCacheModel.excelFileTemplate = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			vrReportCategoryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			vrReportCategoryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return vrReportCategoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", rptCode=");
		sb.append(getRptCode());
		sb.append(", rptName=");
		sb.append(getRptName());
		sb.append(", rptDescription=");
		sb.append(getRptDescription());
		sb.append(", rptGroup=");
		sb.append(getRptGroup());
		sb.append(", rptLevel=");
		sb.append(getRptLevel());
		sb.append(", sequenceNo=");
		sb.append(getSequenceNo());
		sb.append(", jasperFileTemplate=");
		sb.append(getJasperFileTemplate());
		sb.append(", excelFileTemplate=");
		sb.append(getExcelFileTemplate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.VRReportCategory");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rptCode</column-name><column-value><![CDATA[");
		sb.append(getRptCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rptName</column-name><column-value><![CDATA[");
		sb.append(getRptName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rptDescription</column-name><column-value><![CDATA[");
		sb.append(getRptDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rptGroup</column-name><column-value><![CDATA[");
		sb.append(getRptGroup());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rptLevel</column-name><column-value><![CDATA[");
		sb.append(getRptLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sequenceNo</column-name><column-value><![CDATA[");
		sb.append(getSequenceNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jasperFileTemplate</column-name><column-value><![CDATA[");
		sb.append(getJasperFileTemplate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>excelFileTemplate</column-name><column-value><![CDATA[");
		sb.append(getExcelFileTemplate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VRReportCategory.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VRReportCategory.class
		};
	private int _id;
	private String _rptCode;
	private String _originalRptCode;
	private String _rptName;
	private String _rptDescription;
	private String _originalRptDescription;
	private String _rptGroup;
	private String _originalRptGroup;
	private int _rptLevel;
	private int _originalRptLevel;
	private boolean _setOriginalRptLevel;
	private int _sequenceNo;
	private String _jasperFileTemplate;
	private String _excelFileTemplate;
	private Date _modifiedDate;
	private long _columnBitmask;
	private VRReportCategory _escapedModel;
}