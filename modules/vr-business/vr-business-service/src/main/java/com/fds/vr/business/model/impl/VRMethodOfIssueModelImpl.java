/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.VRMethodOfIssue;
import com.fds.vr.business.model.VRMethodOfIssueModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VRMethodOfIssue service. Represents a row in the &quot;vr_methodofissue&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VRMethodOfIssueModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VRMethodOfIssueImpl}.
 * </p>
 *
 * @author LamTV
 * @see VRMethodOfIssueImpl
 * @see VRMethodOfIssue
 * @see VRMethodOfIssueModel
 * @generated
 */
@ProviderType
public class VRMethodOfIssueModelImpl extends BaseModelImpl<VRMethodOfIssue>
	implements VRMethodOfIssueModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vr method of issue model instance should use the {@link VRMethodOfIssue} interface instead.
	 */
	public static final String TABLE_NAME = "vr_methodofissue";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "mtCore", Types.BIGINT },
			{ "vehicleClass", Types.VARCHAR },
			{ "certifiedAssemblyType", Types.VARCHAR },
			{ "certifiedAssemblyTypeDescription", Types.VARCHAR },
			{ "applicantProfileId", Types.BIGINT },
			{ "applicantName", Types.VARCHAR },
			{ "applicantAddress", Types.VARCHAR },
			{ "productionPlantId", Types.BIGINT },
			{ "productionPlantCode", Types.VARCHAR },
			{ "productionPlantName", Types.VARCHAR },
			{ "productionPlantAddress", Types.VARCHAR },
			{ "methodOfIssue", Types.VARCHAR },
			{ "methodApproved", Types.INTEGER },
			{ "methodInMonth", Types.INTEGER },
			{ "methodInYear", Types.INTEGER },
			{ "periodDuration", Types.INTEGER },
			{ "frequencyIndex", Types.INTEGER },
			{ "remarks", Types.VARCHAR },
			{ "averageStbQuantityIndex", Types.INTEGER },
			{ "maxMonthQuantityIndex", Types.INTEGER },
			{ "averageStmQuantityIndex", Types.INTEGER },
			{ "accumulatedMonthQuantityIndex", Types.INTEGER },
			{ "latestOtherIndex1", Types.INTEGER },
			{ "latestOtherIndex2", Types.INTEGER },
			{ "latestOtherIndex3", Types.INTEGER },
			{ "latestCOPReportDate", Types.TIMESTAMP },
			{ "latestInspectionRecordDate", Types.TIMESTAMP },
			{ "latestNumberOfInspectionInYear", Types.INTEGER },
			{ "latestNumberOfInspectionInMonth", Types.INTEGER },
			{ "latestNumberOfStampInMonth", Types.INTEGER },
			{ "periodStartFrom", Types.TIMESTAMP },
			{ "totalInspection", Types.INTEGER },
			{ "flowIndex", Types.VARCHAR },
			{ "modifyDate", Types.TIMESTAMP },
			{ "syncDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mtCore", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("vehicleClass", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedAssemblyType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certifiedAssemblyTypeDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantProfileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("applicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionPlantId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("productionPlantCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionPlantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionPlantAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("methodOfIssue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("methodApproved", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("methodInMonth", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("methodInYear", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("periodDuration", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("frequencyIndex", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("remarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("averageStbQuantityIndex", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("maxMonthQuantityIndex", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("averageStmQuantityIndex", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("accumulatedMonthQuantityIndex", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("latestOtherIndex1", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("latestOtherIndex2", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("latestOtherIndex3", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("latestCOPReportDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("latestInspectionRecordDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("latestNumberOfInspectionInYear", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("latestNumberOfInspectionInMonth", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("latestNumberOfStampInMonth", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("periodStartFrom", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("totalInspection", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("flowIndex", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifyDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("syncDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table vr_methodofissue (id LONG not null primary key,mtCore LONG,vehicleClass VARCHAR(75) null,certifiedAssemblyType VARCHAR(75) null,certifiedAssemblyTypeDescription VARCHAR(75) null,applicantProfileId LONG,applicantName VARCHAR(75) null,applicantAddress VARCHAR(75) null,productionPlantId LONG,productionPlantCode VARCHAR(75) null,productionPlantName VARCHAR(75) null,productionPlantAddress VARCHAR(75) null,methodOfIssue VARCHAR(75) null,methodApproved INTEGER,methodInMonth INTEGER,methodInYear INTEGER,periodDuration INTEGER,frequencyIndex INTEGER,remarks VARCHAR(75) null,averageStbQuantityIndex INTEGER,maxMonthQuantityIndex INTEGER,averageStmQuantityIndex INTEGER,accumulatedMonthQuantityIndex INTEGER,latestOtherIndex1 INTEGER,latestOtherIndex2 INTEGER,latestOtherIndex3 INTEGER,latestCOPReportDate DATE null,latestInspectionRecordDate DATE null,latestNumberOfInspectionInYear INTEGER,latestNumberOfInspectionInMonth INTEGER,latestNumberOfStampInMonth INTEGER,periodStartFrom DATE null,totalInspection INTEGER,flowIndex VARCHAR(75) null,modifyDate DATE null,syncDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table vr_methodofissue";
	public static final String ORDER_BY_JPQL = " ORDER BY vrMethodOfIssue.modifyDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_methodofissue.modifyDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.VRMethodOfIssue"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.VRMethodOfIssue"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.business.model.VRMethodOfIssue"),
			true);
	public static final long APPLICANTPROFILEID_COLUMN_BITMASK = 1L;
	public static final long CERTIFIEDASSEMBLYTYPE_COLUMN_BITMASK = 2L;
	public static final long PRODUCTIONPLANTCODE_COLUMN_BITMASK = 4L;
	public static final long PRODUCTIONPLANTID_COLUMN_BITMASK = 8L;
	public static final long VEHICLECLASS_COLUMN_BITMASK = 16L;
	public static final long MODIFYDATE_COLUMN_BITMASK = 32L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.VRMethodOfIssue"));

	public VRMethodOfIssueModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VRMethodOfIssue.class;
	}

	@Override
	public String getModelClassName() {
		return VRMethodOfIssue.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("mtCore", getMtCore());
		attributes.put("vehicleClass", getVehicleClass());
		attributes.put("certifiedAssemblyType", getCertifiedAssemblyType());
		attributes.put("certifiedAssemblyTypeDescription",
			getCertifiedAssemblyTypeDescription());
		attributes.put("applicantProfileId", getApplicantProfileId());
		attributes.put("applicantName", getApplicantName());
		attributes.put("applicantAddress", getApplicantAddress());
		attributes.put("productionPlantId", getProductionPlantId());
		attributes.put("productionPlantCode", getProductionPlantCode());
		attributes.put("productionPlantName", getProductionPlantName());
		attributes.put("productionPlantAddress", getProductionPlantAddress());
		attributes.put("methodOfIssue", getMethodOfIssue());
		attributes.put("methodApproved", getMethodApproved());
		attributes.put("methodInMonth", getMethodInMonth());
		attributes.put("methodInYear", getMethodInYear());
		attributes.put("periodDuration", getPeriodDuration());
		attributes.put("frequencyIndex", getFrequencyIndex());
		attributes.put("remarks", getRemarks());
		attributes.put("averageStbQuantityIndex", getAverageStbQuantityIndex());
		attributes.put("maxMonthQuantityIndex", getMaxMonthQuantityIndex());
		attributes.put("averageStmQuantityIndex", getAverageStmQuantityIndex());
		attributes.put("accumulatedMonthQuantityIndex",
			getAccumulatedMonthQuantityIndex());
		attributes.put("latestOtherIndex1", getLatestOtherIndex1());
		attributes.put("latestOtherIndex2", getLatestOtherIndex2());
		attributes.put("latestOtherIndex3", getLatestOtherIndex3());
		attributes.put("latestCOPReportDate", getLatestCOPReportDate());
		attributes.put("latestInspectionRecordDate",
			getLatestInspectionRecordDate());
		attributes.put("latestNumberOfInspectionInYear",
			getLatestNumberOfInspectionInYear());
		attributes.put("latestNumberOfInspectionInMonth",
			getLatestNumberOfInspectionInMonth());
		attributes.put("latestNumberOfStampInMonth",
			getLatestNumberOfStampInMonth());
		attributes.put("periodStartFrom", getPeriodStartFrom());
		attributes.put("totalInspection", getTotalInspection());
		attributes.put("flowIndex", getFlowIndex());
		attributes.put("modifyDate", getModifyDate());
		attributes.put("syncDate", getSyncDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long mtCore = (Long)attributes.get("mtCore");

		if (mtCore != null) {
			setMtCore(mtCore);
		}

		String vehicleClass = (String)attributes.get("vehicleClass");

		if (vehicleClass != null) {
			setVehicleClass(vehicleClass);
		}

		String certifiedAssemblyType = (String)attributes.get(
				"certifiedAssemblyType");

		if (certifiedAssemblyType != null) {
			setCertifiedAssemblyType(certifiedAssemblyType);
		}

		String certifiedAssemblyTypeDescription = (String)attributes.get(
				"certifiedAssemblyTypeDescription");

		if (certifiedAssemblyTypeDescription != null) {
			setCertifiedAssemblyTypeDescription(certifiedAssemblyTypeDescription);
		}

		Long applicantProfileId = (Long)attributes.get("applicantProfileId");

		if (applicantProfileId != null) {
			setApplicantProfileId(applicantProfileId);
		}

		String applicantName = (String)attributes.get("applicantName");

		if (applicantName != null) {
			setApplicantName(applicantName);
		}

		String applicantAddress = (String)attributes.get("applicantAddress");

		if (applicantAddress != null) {
			setApplicantAddress(applicantAddress);
		}

		Long productionPlantId = (Long)attributes.get("productionPlantId");

		if (productionPlantId != null) {
			setProductionPlantId(productionPlantId);
		}

		String productionPlantCode = (String)attributes.get(
				"productionPlantCode");

		if (productionPlantCode != null) {
			setProductionPlantCode(productionPlantCode);
		}

		String productionPlantName = (String)attributes.get(
				"productionPlantName");

		if (productionPlantName != null) {
			setProductionPlantName(productionPlantName);
		}

		String productionPlantAddress = (String)attributes.get(
				"productionPlantAddress");

		if (productionPlantAddress != null) {
			setProductionPlantAddress(productionPlantAddress);
		}

		String methodOfIssue = (String)attributes.get("methodOfIssue");

		if (methodOfIssue != null) {
			setMethodOfIssue(methodOfIssue);
		}

		Integer methodApproved = (Integer)attributes.get("methodApproved");

		if (methodApproved != null) {
			setMethodApproved(methodApproved);
		}

		Integer methodInMonth = (Integer)attributes.get("methodInMonth");

		if (methodInMonth != null) {
			setMethodInMonth(methodInMonth);
		}

		Integer methodInYear = (Integer)attributes.get("methodInYear");

		if (methodInYear != null) {
			setMethodInYear(methodInYear);
		}

		Integer periodDuration = (Integer)attributes.get("periodDuration");

		if (periodDuration != null) {
			setPeriodDuration(periodDuration);
		}

		Integer frequencyIndex = (Integer)attributes.get("frequencyIndex");

		if (frequencyIndex != null) {
			setFrequencyIndex(frequencyIndex);
		}

		String remarks = (String)attributes.get("remarks");

		if (remarks != null) {
			setRemarks(remarks);
		}

		Integer averageStbQuantityIndex = (Integer)attributes.get(
				"averageStbQuantityIndex");

		if (averageStbQuantityIndex != null) {
			setAverageStbQuantityIndex(averageStbQuantityIndex);
		}

		Integer maxMonthQuantityIndex = (Integer)attributes.get(
				"maxMonthQuantityIndex");

		if (maxMonthQuantityIndex != null) {
			setMaxMonthQuantityIndex(maxMonthQuantityIndex);
		}

		Integer averageStmQuantityIndex = (Integer)attributes.get(
				"averageStmQuantityIndex");

		if (averageStmQuantityIndex != null) {
			setAverageStmQuantityIndex(averageStmQuantityIndex);
		}

		Integer accumulatedMonthQuantityIndex = (Integer)attributes.get(
				"accumulatedMonthQuantityIndex");

		if (accumulatedMonthQuantityIndex != null) {
			setAccumulatedMonthQuantityIndex(accumulatedMonthQuantityIndex);
		}

		Integer latestOtherIndex1 = (Integer)attributes.get("latestOtherIndex1");

		if (latestOtherIndex1 != null) {
			setLatestOtherIndex1(latestOtherIndex1);
		}

		Integer latestOtherIndex2 = (Integer)attributes.get("latestOtherIndex2");

		if (latestOtherIndex2 != null) {
			setLatestOtherIndex2(latestOtherIndex2);
		}

		Integer latestOtherIndex3 = (Integer)attributes.get("latestOtherIndex3");

		if (latestOtherIndex3 != null) {
			setLatestOtherIndex3(latestOtherIndex3);
		}

		Date latestCOPReportDate = (Date)attributes.get("latestCOPReportDate");

		if (latestCOPReportDate != null) {
			setLatestCOPReportDate(latestCOPReportDate);
		}

		Date latestInspectionRecordDate = (Date)attributes.get(
				"latestInspectionRecordDate");

		if (latestInspectionRecordDate != null) {
			setLatestInspectionRecordDate(latestInspectionRecordDate);
		}

		Integer latestNumberOfInspectionInYear = (Integer)attributes.get(
				"latestNumberOfInspectionInYear");

		if (latestNumberOfInspectionInYear != null) {
			setLatestNumberOfInspectionInYear(latestNumberOfInspectionInYear);
		}

		Integer latestNumberOfInspectionInMonth = (Integer)attributes.get(
				"latestNumberOfInspectionInMonth");

		if (latestNumberOfInspectionInMonth != null) {
			setLatestNumberOfInspectionInMonth(latestNumberOfInspectionInMonth);
		}

		Integer latestNumberOfStampInMonth = (Integer)attributes.get(
				"latestNumberOfStampInMonth");

		if (latestNumberOfStampInMonth != null) {
			setLatestNumberOfStampInMonth(latestNumberOfStampInMonth);
		}

		Date periodStartFrom = (Date)attributes.get("periodStartFrom");

		if (periodStartFrom != null) {
			setPeriodStartFrom(periodStartFrom);
		}

		Integer totalInspection = (Integer)attributes.get("totalInspection");

		if (totalInspection != null) {
			setTotalInspection(totalInspection);
		}

		String flowIndex = (String)attributes.get("flowIndex");

		if (flowIndex != null) {
			setFlowIndex(flowIndex);
		}

		Date modifyDate = (Date)attributes.get("modifyDate");

		if (modifyDate != null) {
			setModifyDate(modifyDate);
		}

		Date syncDate = (Date)attributes.get("syncDate");

		if (syncDate != null) {
			setSyncDate(syncDate);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getMtCore() {
		return _mtCore;
	}

	@Override
	public void setMtCore(long mtCore) {
		_mtCore = mtCore;
	}

	@Override
	public String getVehicleClass() {
		if (_vehicleClass == null) {
			return StringPool.BLANK;
		}
		else {
			return _vehicleClass;
		}
	}

	@Override
	public void setVehicleClass(String vehicleClass) {
		_columnBitmask |= VEHICLECLASS_COLUMN_BITMASK;

		if (_originalVehicleClass == null) {
			_originalVehicleClass = _vehicleClass;
		}

		_vehicleClass = vehicleClass;
	}

	public String getOriginalVehicleClass() {
		return GetterUtil.getString(_originalVehicleClass);
	}

	@Override
	public String getCertifiedAssemblyType() {
		if (_certifiedAssemblyType == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedAssemblyType;
		}
	}

	@Override
	public void setCertifiedAssemblyType(String certifiedAssemblyType) {
		_columnBitmask |= CERTIFIEDASSEMBLYTYPE_COLUMN_BITMASK;

		if (_originalCertifiedAssemblyType == null) {
			_originalCertifiedAssemblyType = _certifiedAssemblyType;
		}

		_certifiedAssemblyType = certifiedAssemblyType;
	}

	public String getOriginalCertifiedAssemblyType() {
		return GetterUtil.getString(_originalCertifiedAssemblyType);
	}

	@Override
	public String getCertifiedAssemblyTypeDescription() {
		if (_certifiedAssemblyTypeDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _certifiedAssemblyTypeDescription;
		}
	}

	@Override
	public void setCertifiedAssemblyTypeDescription(
		String certifiedAssemblyTypeDescription) {
		_certifiedAssemblyTypeDescription = certifiedAssemblyTypeDescription;
	}

	@Override
	public long getApplicantProfileId() {
		return _applicantProfileId;
	}

	@Override
	public void setApplicantProfileId(long applicantProfileId) {
		_columnBitmask |= APPLICANTPROFILEID_COLUMN_BITMASK;

		if (!_setOriginalApplicantProfileId) {
			_setOriginalApplicantProfileId = true;

			_originalApplicantProfileId = _applicantProfileId;
		}

		_applicantProfileId = applicantProfileId;
	}

	public long getOriginalApplicantProfileId() {
		return _originalApplicantProfileId;
	}

	@Override
	public String getApplicantName() {
		if (_applicantName == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantName;
		}
	}

	@Override
	public void setApplicantName(String applicantName) {
		_applicantName = applicantName;
	}

	@Override
	public String getApplicantAddress() {
		if (_applicantAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantAddress;
		}
	}

	@Override
	public void setApplicantAddress(String applicantAddress) {
		_applicantAddress = applicantAddress;
	}

	@Override
	public long getProductionPlantId() {
		return _productionPlantId;
	}

	@Override
	public void setProductionPlantId(long productionPlantId) {
		_columnBitmask |= PRODUCTIONPLANTID_COLUMN_BITMASK;

		if (!_setOriginalProductionPlantId) {
			_setOriginalProductionPlantId = true;

			_originalProductionPlantId = _productionPlantId;
		}

		_productionPlantId = productionPlantId;
	}

	public long getOriginalProductionPlantId() {
		return _originalProductionPlantId;
	}

	@Override
	public String getProductionPlantCode() {
		if (_productionPlantCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionPlantCode;
		}
	}

	@Override
	public void setProductionPlantCode(String productionPlantCode) {
		_columnBitmask |= PRODUCTIONPLANTCODE_COLUMN_BITMASK;

		if (_originalProductionPlantCode == null) {
			_originalProductionPlantCode = _productionPlantCode;
		}

		_productionPlantCode = productionPlantCode;
	}

	public String getOriginalProductionPlantCode() {
		return GetterUtil.getString(_originalProductionPlantCode);
	}

	@Override
	public String getProductionPlantName() {
		if (_productionPlantName == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionPlantName;
		}
	}

	@Override
	public void setProductionPlantName(String productionPlantName) {
		_productionPlantName = productionPlantName;
	}

	@Override
	public String getProductionPlantAddress() {
		if (_productionPlantAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionPlantAddress;
		}
	}

	@Override
	public void setProductionPlantAddress(String productionPlantAddress) {
		_productionPlantAddress = productionPlantAddress;
	}

	@Override
	public String getMethodOfIssue() {
		if (_methodOfIssue == null) {
			return StringPool.BLANK;
		}
		else {
			return _methodOfIssue;
		}
	}

	@Override
	public void setMethodOfIssue(String methodOfIssue) {
		_methodOfIssue = methodOfIssue;
	}

	@Override
	public int getMethodApproved() {
		return _methodApproved;
	}

	@Override
	public void setMethodApproved(int methodApproved) {
		_methodApproved = methodApproved;
	}

	@Override
	public int getMethodInMonth() {
		return _methodInMonth;
	}

	@Override
	public void setMethodInMonth(int methodInMonth) {
		_methodInMonth = methodInMonth;
	}

	@Override
	public int getMethodInYear() {
		return _methodInYear;
	}

	@Override
	public void setMethodInYear(int methodInYear) {
		_methodInYear = methodInYear;
	}

	@Override
	public int getPeriodDuration() {
		return _periodDuration;
	}

	@Override
	public void setPeriodDuration(int periodDuration) {
		_periodDuration = periodDuration;
	}

	@Override
	public int getFrequencyIndex() {
		return _frequencyIndex;
	}

	@Override
	public void setFrequencyIndex(int frequencyIndex) {
		_frequencyIndex = frequencyIndex;
	}

	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	@Override
	public int getAverageStbQuantityIndex() {
		return _averageStbQuantityIndex;
	}

	@Override
	public void setAverageStbQuantityIndex(int averageStbQuantityIndex) {
		_averageStbQuantityIndex = averageStbQuantityIndex;
	}

	@Override
	public int getMaxMonthQuantityIndex() {
		return _maxMonthQuantityIndex;
	}

	@Override
	public void setMaxMonthQuantityIndex(int maxMonthQuantityIndex) {
		_maxMonthQuantityIndex = maxMonthQuantityIndex;
	}

	@Override
	public int getAverageStmQuantityIndex() {
		return _averageStmQuantityIndex;
	}

	@Override
	public void setAverageStmQuantityIndex(int averageStmQuantityIndex) {
		_averageStmQuantityIndex = averageStmQuantityIndex;
	}

	@Override
	public int getAccumulatedMonthQuantityIndex() {
		return _accumulatedMonthQuantityIndex;
	}

	@Override
	public void setAccumulatedMonthQuantityIndex(
		int accumulatedMonthQuantityIndex) {
		_accumulatedMonthQuantityIndex = accumulatedMonthQuantityIndex;
	}

	@Override
	public int getLatestOtherIndex1() {
		return _latestOtherIndex1;
	}

	@Override
	public void setLatestOtherIndex1(int latestOtherIndex1) {
		_latestOtherIndex1 = latestOtherIndex1;
	}

	@Override
	public int getLatestOtherIndex2() {
		return _latestOtherIndex2;
	}

	@Override
	public void setLatestOtherIndex2(int latestOtherIndex2) {
		_latestOtherIndex2 = latestOtherIndex2;
	}

	@Override
	public int getLatestOtherIndex3() {
		return _latestOtherIndex3;
	}

	@Override
	public void setLatestOtherIndex3(int latestOtherIndex3) {
		_latestOtherIndex3 = latestOtherIndex3;
	}

	@Override
	public Date getLatestCOPReportDate() {
		return _latestCOPReportDate;
	}

	@Override
	public void setLatestCOPReportDate(Date latestCOPReportDate) {
		_latestCOPReportDate = latestCOPReportDate;
	}

	@Override
	public Date getLatestInspectionRecordDate() {
		return _latestInspectionRecordDate;
	}

	@Override
	public void setLatestInspectionRecordDate(Date latestInspectionRecordDate) {
		_latestInspectionRecordDate = latestInspectionRecordDate;
	}

	@Override
	public int getLatestNumberOfInspectionInYear() {
		return _latestNumberOfInspectionInYear;
	}

	@Override
	public void setLatestNumberOfInspectionInYear(
		int latestNumberOfInspectionInYear) {
		_latestNumberOfInspectionInYear = latestNumberOfInspectionInYear;
	}

	@Override
	public int getLatestNumberOfInspectionInMonth() {
		return _latestNumberOfInspectionInMonth;
	}

	@Override
	public void setLatestNumberOfInspectionInMonth(
		int latestNumberOfInspectionInMonth) {
		_latestNumberOfInspectionInMonth = latestNumberOfInspectionInMonth;
	}

	@Override
	public int getLatestNumberOfStampInMonth() {
		return _latestNumberOfStampInMonth;
	}

	@Override
	public void setLatestNumberOfStampInMonth(int latestNumberOfStampInMonth) {
		_latestNumberOfStampInMonth = latestNumberOfStampInMonth;
	}

	@Override
	public Date getPeriodStartFrom() {
		return _periodStartFrom;
	}

	@Override
	public void setPeriodStartFrom(Date periodStartFrom) {
		_periodStartFrom = periodStartFrom;
	}

	@Override
	public int getTotalInspection() {
		return _totalInspection;
	}

	@Override
	public void setTotalInspection(int totalInspection) {
		_totalInspection = totalInspection;
	}

	@Override
	public String getFlowIndex() {
		if (_flowIndex == null) {
			return StringPool.BLANK;
		}
		else {
			return _flowIndex;
		}
	}

	@Override
	public void setFlowIndex(String flowIndex) {
		_flowIndex = flowIndex;
	}

	@Override
	public Date getModifyDate() {
		return _modifyDate;
	}

	@Override
	public void setModifyDate(Date modifyDate) {
		_columnBitmask = -1L;

		_modifyDate = modifyDate;
	}

	@Override
	public Date getSyncDate() {
		return _syncDate;
	}

	@Override
	public void setSyncDate(Date syncDate) {
		_syncDate = syncDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VRMethodOfIssue.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VRMethodOfIssue toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VRMethodOfIssue)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VRMethodOfIssueImpl vrMethodOfIssueImpl = new VRMethodOfIssueImpl();

		vrMethodOfIssueImpl.setId(getId());
		vrMethodOfIssueImpl.setMtCore(getMtCore());
		vrMethodOfIssueImpl.setVehicleClass(getVehicleClass());
		vrMethodOfIssueImpl.setCertifiedAssemblyType(getCertifiedAssemblyType());
		vrMethodOfIssueImpl.setCertifiedAssemblyTypeDescription(getCertifiedAssemblyTypeDescription());
		vrMethodOfIssueImpl.setApplicantProfileId(getApplicantProfileId());
		vrMethodOfIssueImpl.setApplicantName(getApplicantName());
		vrMethodOfIssueImpl.setApplicantAddress(getApplicantAddress());
		vrMethodOfIssueImpl.setProductionPlantId(getProductionPlantId());
		vrMethodOfIssueImpl.setProductionPlantCode(getProductionPlantCode());
		vrMethodOfIssueImpl.setProductionPlantName(getProductionPlantName());
		vrMethodOfIssueImpl.setProductionPlantAddress(getProductionPlantAddress());
		vrMethodOfIssueImpl.setMethodOfIssue(getMethodOfIssue());
		vrMethodOfIssueImpl.setMethodApproved(getMethodApproved());
		vrMethodOfIssueImpl.setMethodInMonth(getMethodInMonth());
		vrMethodOfIssueImpl.setMethodInYear(getMethodInYear());
		vrMethodOfIssueImpl.setPeriodDuration(getPeriodDuration());
		vrMethodOfIssueImpl.setFrequencyIndex(getFrequencyIndex());
		vrMethodOfIssueImpl.setRemarks(getRemarks());
		vrMethodOfIssueImpl.setAverageStbQuantityIndex(getAverageStbQuantityIndex());
		vrMethodOfIssueImpl.setMaxMonthQuantityIndex(getMaxMonthQuantityIndex());
		vrMethodOfIssueImpl.setAverageStmQuantityIndex(getAverageStmQuantityIndex());
		vrMethodOfIssueImpl.setAccumulatedMonthQuantityIndex(getAccumulatedMonthQuantityIndex());
		vrMethodOfIssueImpl.setLatestOtherIndex1(getLatestOtherIndex1());
		vrMethodOfIssueImpl.setLatestOtherIndex2(getLatestOtherIndex2());
		vrMethodOfIssueImpl.setLatestOtherIndex3(getLatestOtherIndex3());
		vrMethodOfIssueImpl.setLatestCOPReportDate(getLatestCOPReportDate());
		vrMethodOfIssueImpl.setLatestInspectionRecordDate(getLatestInspectionRecordDate());
		vrMethodOfIssueImpl.setLatestNumberOfInspectionInYear(getLatestNumberOfInspectionInYear());
		vrMethodOfIssueImpl.setLatestNumberOfInspectionInMonth(getLatestNumberOfInspectionInMonth());
		vrMethodOfIssueImpl.setLatestNumberOfStampInMonth(getLatestNumberOfStampInMonth());
		vrMethodOfIssueImpl.setPeriodStartFrom(getPeriodStartFrom());
		vrMethodOfIssueImpl.setTotalInspection(getTotalInspection());
		vrMethodOfIssueImpl.setFlowIndex(getFlowIndex());
		vrMethodOfIssueImpl.setModifyDate(getModifyDate());
		vrMethodOfIssueImpl.setSyncDate(getSyncDate());

		vrMethodOfIssueImpl.resetOriginalValues();

		return vrMethodOfIssueImpl;
	}

	@Override
	public int compareTo(VRMethodOfIssue vrMethodOfIssue) {
		int value = 0;

		value = DateUtil.compareTo(getModifyDate(),
				vrMethodOfIssue.getModifyDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VRMethodOfIssue)) {
			return false;
		}

		VRMethodOfIssue vrMethodOfIssue = (VRMethodOfIssue)obj;

		long primaryKey = vrMethodOfIssue.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VRMethodOfIssueModelImpl vrMethodOfIssueModelImpl = this;

		vrMethodOfIssueModelImpl._originalVehicleClass = vrMethodOfIssueModelImpl._vehicleClass;

		vrMethodOfIssueModelImpl._originalCertifiedAssemblyType = vrMethodOfIssueModelImpl._certifiedAssemblyType;

		vrMethodOfIssueModelImpl._originalApplicantProfileId = vrMethodOfIssueModelImpl._applicantProfileId;

		vrMethodOfIssueModelImpl._setOriginalApplicantProfileId = false;

		vrMethodOfIssueModelImpl._originalProductionPlantId = vrMethodOfIssueModelImpl._productionPlantId;

		vrMethodOfIssueModelImpl._setOriginalProductionPlantId = false;

		vrMethodOfIssueModelImpl._originalProductionPlantCode = vrMethodOfIssueModelImpl._productionPlantCode;

		vrMethodOfIssueModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VRMethodOfIssue> toCacheModel() {
		VRMethodOfIssueCacheModel vrMethodOfIssueCacheModel = new VRMethodOfIssueCacheModel();

		vrMethodOfIssueCacheModel.id = getId();

		vrMethodOfIssueCacheModel.mtCore = getMtCore();

		vrMethodOfIssueCacheModel.vehicleClass = getVehicleClass();

		String vehicleClass = vrMethodOfIssueCacheModel.vehicleClass;

		if ((vehicleClass != null) && (vehicleClass.length() == 0)) {
			vrMethodOfIssueCacheModel.vehicleClass = null;
		}

		vrMethodOfIssueCacheModel.certifiedAssemblyType = getCertifiedAssemblyType();

		String certifiedAssemblyType = vrMethodOfIssueCacheModel.certifiedAssemblyType;

		if ((certifiedAssemblyType != null) &&
				(certifiedAssemblyType.length() == 0)) {
			vrMethodOfIssueCacheModel.certifiedAssemblyType = null;
		}

		vrMethodOfIssueCacheModel.certifiedAssemblyTypeDescription = getCertifiedAssemblyTypeDescription();

		String certifiedAssemblyTypeDescription = vrMethodOfIssueCacheModel.certifiedAssemblyTypeDescription;

		if ((certifiedAssemblyTypeDescription != null) &&
				(certifiedAssemblyTypeDescription.length() == 0)) {
			vrMethodOfIssueCacheModel.certifiedAssemblyTypeDescription = null;
		}

		vrMethodOfIssueCacheModel.applicantProfileId = getApplicantProfileId();

		vrMethodOfIssueCacheModel.applicantName = getApplicantName();

		String applicantName = vrMethodOfIssueCacheModel.applicantName;

		if ((applicantName != null) && (applicantName.length() == 0)) {
			vrMethodOfIssueCacheModel.applicantName = null;
		}

		vrMethodOfIssueCacheModel.applicantAddress = getApplicantAddress();

		String applicantAddress = vrMethodOfIssueCacheModel.applicantAddress;

		if ((applicantAddress != null) && (applicantAddress.length() == 0)) {
			vrMethodOfIssueCacheModel.applicantAddress = null;
		}

		vrMethodOfIssueCacheModel.productionPlantId = getProductionPlantId();

		vrMethodOfIssueCacheModel.productionPlantCode = getProductionPlantCode();

		String productionPlantCode = vrMethodOfIssueCacheModel.productionPlantCode;

		if ((productionPlantCode != null) &&
				(productionPlantCode.length() == 0)) {
			vrMethodOfIssueCacheModel.productionPlantCode = null;
		}

		vrMethodOfIssueCacheModel.productionPlantName = getProductionPlantName();

		String productionPlantName = vrMethodOfIssueCacheModel.productionPlantName;

		if ((productionPlantName != null) &&
				(productionPlantName.length() == 0)) {
			vrMethodOfIssueCacheModel.productionPlantName = null;
		}

		vrMethodOfIssueCacheModel.productionPlantAddress = getProductionPlantAddress();

		String productionPlantAddress = vrMethodOfIssueCacheModel.productionPlantAddress;

		if ((productionPlantAddress != null) &&
				(productionPlantAddress.length() == 0)) {
			vrMethodOfIssueCacheModel.productionPlantAddress = null;
		}

		vrMethodOfIssueCacheModel.methodOfIssue = getMethodOfIssue();

		String methodOfIssue = vrMethodOfIssueCacheModel.methodOfIssue;

		if ((methodOfIssue != null) && (methodOfIssue.length() == 0)) {
			vrMethodOfIssueCacheModel.methodOfIssue = null;
		}

		vrMethodOfIssueCacheModel.methodApproved = getMethodApproved();

		vrMethodOfIssueCacheModel.methodInMonth = getMethodInMonth();

		vrMethodOfIssueCacheModel.methodInYear = getMethodInYear();

		vrMethodOfIssueCacheModel.periodDuration = getPeriodDuration();

		vrMethodOfIssueCacheModel.frequencyIndex = getFrequencyIndex();

		vrMethodOfIssueCacheModel.remarks = getRemarks();

		String remarks = vrMethodOfIssueCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			vrMethodOfIssueCacheModel.remarks = null;
		}

		vrMethodOfIssueCacheModel.averageStbQuantityIndex = getAverageStbQuantityIndex();

		vrMethodOfIssueCacheModel.maxMonthQuantityIndex = getMaxMonthQuantityIndex();

		vrMethodOfIssueCacheModel.averageStmQuantityIndex = getAverageStmQuantityIndex();

		vrMethodOfIssueCacheModel.accumulatedMonthQuantityIndex = getAccumulatedMonthQuantityIndex();

		vrMethodOfIssueCacheModel.latestOtherIndex1 = getLatestOtherIndex1();

		vrMethodOfIssueCacheModel.latestOtherIndex2 = getLatestOtherIndex2();

		vrMethodOfIssueCacheModel.latestOtherIndex3 = getLatestOtherIndex3();

		Date latestCOPReportDate = getLatestCOPReportDate();

		if (latestCOPReportDate != null) {
			vrMethodOfIssueCacheModel.latestCOPReportDate = latestCOPReportDate.getTime();
		}
		else {
			vrMethodOfIssueCacheModel.latestCOPReportDate = Long.MIN_VALUE;
		}

		Date latestInspectionRecordDate = getLatestInspectionRecordDate();

		if (latestInspectionRecordDate != null) {
			vrMethodOfIssueCacheModel.latestInspectionRecordDate = latestInspectionRecordDate.getTime();
		}
		else {
			vrMethodOfIssueCacheModel.latestInspectionRecordDate = Long.MIN_VALUE;
		}

		vrMethodOfIssueCacheModel.latestNumberOfInspectionInYear = getLatestNumberOfInspectionInYear();

		vrMethodOfIssueCacheModel.latestNumberOfInspectionInMonth = getLatestNumberOfInspectionInMonth();

		vrMethodOfIssueCacheModel.latestNumberOfStampInMonth = getLatestNumberOfStampInMonth();

		Date periodStartFrom = getPeriodStartFrom();

		if (periodStartFrom != null) {
			vrMethodOfIssueCacheModel.periodStartFrom = periodStartFrom.getTime();
		}
		else {
			vrMethodOfIssueCacheModel.periodStartFrom = Long.MIN_VALUE;
		}

		vrMethodOfIssueCacheModel.totalInspection = getTotalInspection();

		vrMethodOfIssueCacheModel.flowIndex = getFlowIndex();

		String flowIndex = vrMethodOfIssueCacheModel.flowIndex;

		if ((flowIndex != null) && (flowIndex.length() == 0)) {
			vrMethodOfIssueCacheModel.flowIndex = null;
		}

		Date modifyDate = getModifyDate();

		if (modifyDate != null) {
			vrMethodOfIssueCacheModel.modifyDate = modifyDate.getTime();
		}
		else {
			vrMethodOfIssueCacheModel.modifyDate = Long.MIN_VALUE;
		}

		Date syncDate = getSyncDate();

		if (syncDate != null) {
			vrMethodOfIssueCacheModel.syncDate = syncDate.getTime();
		}
		else {
			vrMethodOfIssueCacheModel.syncDate = Long.MIN_VALUE;
		}

		return vrMethodOfIssueCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(73);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", mtCore=");
		sb.append(getMtCore());
		sb.append(", vehicleClass=");
		sb.append(getVehicleClass());
		sb.append(", certifiedAssemblyType=");
		sb.append(getCertifiedAssemblyType());
		sb.append(", certifiedAssemblyTypeDescription=");
		sb.append(getCertifiedAssemblyTypeDescription());
		sb.append(", applicantProfileId=");
		sb.append(getApplicantProfileId());
		sb.append(", applicantName=");
		sb.append(getApplicantName());
		sb.append(", applicantAddress=");
		sb.append(getApplicantAddress());
		sb.append(", productionPlantId=");
		sb.append(getProductionPlantId());
		sb.append(", productionPlantCode=");
		sb.append(getProductionPlantCode());
		sb.append(", productionPlantName=");
		sb.append(getProductionPlantName());
		sb.append(", productionPlantAddress=");
		sb.append(getProductionPlantAddress());
		sb.append(", methodOfIssue=");
		sb.append(getMethodOfIssue());
		sb.append(", methodApproved=");
		sb.append(getMethodApproved());
		sb.append(", methodInMonth=");
		sb.append(getMethodInMonth());
		sb.append(", methodInYear=");
		sb.append(getMethodInYear());
		sb.append(", periodDuration=");
		sb.append(getPeriodDuration());
		sb.append(", frequencyIndex=");
		sb.append(getFrequencyIndex());
		sb.append(", remarks=");
		sb.append(getRemarks());
		sb.append(", averageStbQuantityIndex=");
		sb.append(getAverageStbQuantityIndex());
		sb.append(", maxMonthQuantityIndex=");
		sb.append(getMaxMonthQuantityIndex());
		sb.append(", averageStmQuantityIndex=");
		sb.append(getAverageStmQuantityIndex());
		sb.append(", accumulatedMonthQuantityIndex=");
		sb.append(getAccumulatedMonthQuantityIndex());
		sb.append(", latestOtherIndex1=");
		sb.append(getLatestOtherIndex1());
		sb.append(", latestOtherIndex2=");
		sb.append(getLatestOtherIndex2());
		sb.append(", latestOtherIndex3=");
		sb.append(getLatestOtherIndex3());
		sb.append(", latestCOPReportDate=");
		sb.append(getLatestCOPReportDate());
		sb.append(", latestInspectionRecordDate=");
		sb.append(getLatestInspectionRecordDate());
		sb.append(", latestNumberOfInspectionInYear=");
		sb.append(getLatestNumberOfInspectionInYear());
		sb.append(", latestNumberOfInspectionInMonth=");
		sb.append(getLatestNumberOfInspectionInMonth());
		sb.append(", latestNumberOfStampInMonth=");
		sb.append(getLatestNumberOfStampInMonth());
		sb.append(", periodStartFrom=");
		sb.append(getPeriodStartFrom());
		sb.append(", totalInspection=");
		sb.append(getTotalInspection());
		sb.append(", flowIndex=");
		sb.append(getFlowIndex());
		sb.append(", modifyDate=");
		sb.append(getModifyDate());
		sb.append(", syncDate=");
		sb.append(getSyncDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(112);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.VRMethodOfIssue");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mtCore</column-name><column-value><![CDATA[");
		sb.append(getMtCore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleClass</column-name><column-value><![CDATA[");
		sb.append(getVehicleClass());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedAssemblyType</column-name><column-value><![CDATA[");
		sb.append(getCertifiedAssemblyType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certifiedAssemblyTypeDescription</column-name><column-value><![CDATA[");
		sb.append(getCertifiedAssemblyTypeDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantProfileId</column-name><column-value><![CDATA[");
		sb.append(getApplicantProfileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantName</column-name><column-value><![CDATA[");
		sb.append(getApplicantName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantAddress</column-name><column-value><![CDATA[");
		sb.append(getApplicantAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantId</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantCode</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantName</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantAddress</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>methodOfIssue</column-name><column-value><![CDATA[");
		sb.append(getMethodOfIssue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>methodApproved</column-name><column-value><![CDATA[");
		sb.append(getMethodApproved());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>methodInMonth</column-name><column-value><![CDATA[");
		sb.append(getMethodInMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>methodInYear</column-name><column-value><![CDATA[");
		sb.append(getMethodInYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>periodDuration</column-name><column-value><![CDATA[");
		sb.append(getPeriodDuration());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>frequencyIndex</column-name><column-value><![CDATA[");
		sb.append(getFrequencyIndex());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remarks</column-name><column-value><![CDATA[");
		sb.append(getRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>averageStbQuantityIndex</column-name><column-value><![CDATA[");
		sb.append(getAverageStbQuantityIndex());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxMonthQuantityIndex</column-name><column-value><![CDATA[");
		sb.append(getMaxMonthQuantityIndex());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>averageStmQuantityIndex</column-name><column-value><![CDATA[");
		sb.append(getAverageStmQuantityIndex());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accumulatedMonthQuantityIndex</column-name><column-value><![CDATA[");
		sb.append(getAccumulatedMonthQuantityIndex());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>latestOtherIndex1</column-name><column-value><![CDATA[");
		sb.append(getLatestOtherIndex1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>latestOtherIndex2</column-name><column-value><![CDATA[");
		sb.append(getLatestOtherIndex2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>latestOtherIndex3</column-name><column-value><![CDATA[");
		sb.append(getLatestOtherIndex3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>latestCOPReportDate</column-name><column-value><![CDATA[");
		sb.append(getLatestCOPReportDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>latestInspectionRecordDate</column-name><column-value><![CDATA[");
		sb.append(getLatestInspectionRecordDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>latestNumberOfInspectionInYear</column-name><column-value><![CDATA[");
		sb.append(getLatestNumberOfInspectionInYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>latestNumberOfInspectionInMonth</column-name><column-value><![CDATA[");
		sb.append(getLatestNumberOfInspectionInMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>latestNumberOfStampInMonth</column-name><column-value><![CDATA[");
		sb.append(getLatestNumberOfStampInMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>periodStartFrom</column-name><column-value><![CDATA[");
		sb.append(getPeriodStartFrom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalInspection</column-name><column-value><![CDATA[");
		sb.append(getTotalInspection());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>flowIndex</column-name><column-value><![CDATA[");
		sb.append(getFlowIndex());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifyDate</column-name><column-value><![CDATA[");
		sb.append(getModifyDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncDate</column-name><column-value><![CDATA[");
		sb.append(getSyncDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VRMethodOfIssue.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VRMethodOfIssue.class
		};
	private long _id;
	private long _mtCore;
	private String _vehicleClass;
	private String _originalVehicleClass;
	private String _certifiedAssemblyType;
	private String _originalCertifiedAssemblyType;
	private String _certifiedAssemblyTypeDescription;
	private long _applicantProfileId;
	private long _originalApplicantProfileId;
	private boolean _setOriginalApplicantProfileId;
	private String _applicantName;
	private String _applicantAddress;
	private long _productionPlantId;
	private long _originalProductionPlantId;
	private boolean _setOriginalProductionPlantId;
	private String _productionPlantCode;
	private String _originalProductionPlantCode;
	private String _productionPlantName;
	private String _productionPlantAddress;
	private String _methodOfIssue;
	private int _methodApproved;
	private int _methodInMonth;
	private int _methodInYear;
	private int _periodDuration;
	private int _frequencyIndex;
	private String _remarks;
	private int _averageStbQuantityIndex;
	private int _maxMonthQuantityIndex;
	private int _averageStmQuantityIndex;
	private int _accumulatedMonthQuantityIndex;
	private int _latestOtherIndex1;
	private int _latestOtherIndex2;
	private int _latestOtherIndex3;
	private Date _latestCOPReportDate;
	private Date _latestInspectionRecordDate;
	private int _latestNumberOfInspectionInYear;
	private int _latestNumberOfInspectionInMonth;
	private int _latestNumberOfStampInMonth;
	private Date _periodStartFrom;
	private int _totalInspection;
	private String _flowIndex;
	private Date _modifyDate;
	private Date _syncDate;
	private long _columnBitmask;
	private VRMethodOfIssue _escapedModel;
}